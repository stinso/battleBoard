{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\views\\\\auth\\\\VerifyForgotPasswordView\\\\VerifyForgotPassword.js\",\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { Box, Button, TextField, makeStyles } from '@material-ui/core';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { recoverPassword } from '../../../service/node.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {}\n})); //http://localhost:3000/VerifyEmail?token=p5SRnMJwzaAKcohD\n\nconst VerifyForgotPassword = ({\n  className,\n  ...rest\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  function useQuery() {\n    _s();\n\n    return new URLSearchParams(useLocation().search);\n  }\n\n  _s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n    return [useLocation];\n  });\n\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const history = useHistory();\n  /* let query = useQuery();\r\n  let token = query.get(\"token\")\r\n    console.log('###########################')\r\n  console.log('token: ' + token) */\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      email: Yup.string().email('Must be a valid email').max(255).required('Email is required')\n    }),\n    onSubmit: async (values, {\n      setErrors,\n      setStatus,\n      setSubmitting\n    }) => {\n      try {\n        const {\n          data\n        } = await recoverPassword({\n          email: values.email,\n          reCaptchaToken: ''\n        });\n\n        if (data && data.success) {\n          //setShowModal(true);\n          history.push('/dashboard');\n        } else {\n          setStatus({\n            success: false\n          });\n          setErrors({\n            submit: data.error\n          });\n          setSubmitting(false);\n        }\n\n        if (isMountedRef.current) {\n          setStatus({\n            success: true\n          });\n          setSubmitting(false);\n        }\n      } catch (err) {\n        console.error(err);\n        setStatus({\n          success: false\n        });\n        setErrors({\n          submit: err.message\n        });\n        setSubmitting(false);\n      }\n    },\n    children: ({\n      errors,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      isSubmitting,\n      touched,\n      values\n    }) => /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      className: clsx(classes.root, className),\n      onSubmit: handleSubmit,\n      ...rest,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        error: Boolean(touched.email && errors.email),\n        fullWidth: true,\n        helperText: touched.email && errors.email,\n        label: \"Email Address\",\n        margin: \"normal\",\n        name: \"email\",\n        onBlur: handleBlur,\n        onChange: handleChange,\n        type: \"email\",\n        value: values.email,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          disabled: isSubmitting,\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Send Password Reset Link\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(VerifyForgotPassword, \"pfiEX5Jo4a99bquzwcX0T87vDn4=\", false, function () {\n  return [useStyles, useIsMountedRef, useHistory];\n});\n\n_c = VerifyForgotPassword;\nVerifyForgotPassword.propTypes = {\n  className: PropTypes.string\n};\nexport default VerifyForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyForgotPassword\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/views/auth/VerifyForgotPasswordView/VerifyForgotPassword.js"],"names":["React","clsx","Yup","PropTypes","useHistory","useLocation","Formik","Box","Button","TextField","makeStyles","useIsMountedRef","recoverPassword","useStyles","root","VerifyForgotPassword","className","rest","useQuery","URLSearchParams","search","classes","isMountedRef","history","email","submit","object","shape","string","max","required","values","setErrors","setStatus","setSubmitting","data","reCaptchaToken","success","push","error","current","err","console","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n  useHistory,\r\n  useLocation\r\n} from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport { recoverPassword } from '../../../service/node.service';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\n//http://localhost:3000/VerifyEmail?token=p5SRnMJwzaAKcohD\r\n\r\n\r\nconst VerifyForgotPassword = ({ className, ...rest }) => {\r\n  function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n  }\r\n  \r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const history = useHistory();\r\n  /* let query = useQuery();\r\n  let token = query.get(\"token\")\r\n\r\n  console.log('###########################')\r\n  console.log('token: ' + token) */\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        submit: null\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string().email('Must be a valid email').max(255).required('Email is required')\r\n      })}\r\n      onSubmit={async (values, {\r\n        setErrors,\r\n        setStatus,\r\n        setSubmitting\r\n      }) => {\r\n        try {\r\n          const { data } = await recoverPassword({\r\n            email: values.email,\r\n            reCaptchaToken: ''\r\n          });\r\n\r\n          if (data && data.success) {\r\n            //setShowModal(true);\r\n            history.push('/dashboard')\r\n          }\r\n          else {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: data.error });\r\n            setSubmitting(false);\r\n          }\r\n\r\n          if (isMountedRef.current) {\r\n            setStatus({ success: true });\r\n            setSubmitting(false);\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          setStatus({ success: false });\r\n          setErrors({ submit: err.message });\r\n          setSubmitting(false);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <form\r\n          noValidate\r\n          className={clsx(classes.root, className)}\r\n          onSubmit={handleSubmit}\r\n          {...rest}\r\n        >\r\n          <TextField\r\n            error={Boolean(touched.email && errors.email)}\r\n            fullWidth\r\n            helperText={touched.email && errors.email}\r\n            label=\"Email Address\"\r\n            margin=\"normal\"\r\n            name=\"email\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"email\"\r\n            value={values.email}\r\n            variant=\"outlined\"\r\n          />          \r\n          <Box mt={2}>\r\n            <Button\r\n              color=\"secondary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Send Password Reset Link\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nVerifyForgotPassword.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default VerifyForgotPassword;\r\n"]},"metadata":{},"sourceType":"module"}