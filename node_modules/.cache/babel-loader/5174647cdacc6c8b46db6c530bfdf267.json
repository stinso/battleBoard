{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\views\\\\auth\\\\LoginView\\\\JWTLogin.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useHistory } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { Box, Button, FormHelperText, TextField, makeStyles } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport useAuth from 'src/hooks/useAuth';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef'; // new\n\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { useEffect, useState, useContext } from 'react'; //import { useRouter } from 'next/router'\n\nimport { loginService } from '../../../service/node.service.js';\nimport { SignUpRedirectURL, ForgotPasswordRedirectURL, RecaptchaSiteKey } from '../../../config/constants';\nimport { AuthContext } from '../../../context/AuthContext';\nimport { LOGIN_REQUEST } from '../../../actions/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst JWTLogin = ({\n  className,\n  ...rest\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    login\n  } = useAuth();\n  const isMountedRef = useIsMountedRef(); // new\n\n  const history = useHistory();\n  const {\n    dispatch\n  } = useContext(AuthContext);\n  const [userNameFocus, setUserNameFocus] = useState();\n  const [passwordFocus, setPasswordFocus] = useState();\n  const [userName, setUserName] = useState('');\n  const [password, setPassword] = useState('');\n  const [errMsg, setErrMsg] = useState();\n  const recaptchaRef = React.useRef();\n  const [captchaVerified, setCaptchaVerified] = useState(false);\n  const [captchaToken, setCaptchaToken] = useState();\n\n  const onCaptchaChange = value => {\n    setCaptchaVerified(value ? true : false);\n    setCaptchaToken(value);\n  };\n\n  useEffect(() => {\n    document.documentElement.scrollTop = 0;\n    document.scrollingElement.scrollTop = 0;\n    document.body.classList.add(\"login-page\");\n  }, []);\n\n  async function onLoginButtonClick(e) {\n    setErrMsg('');\n    e.preventDefault();\n\n    if (userName && password && captchaVerified) {\n      try {\n        let formData = {\n          username: userName,\n          reCaptchaToken: captchaToken,\n          password\n        };\n        const {\n          data\n        } = await getMyInfoService({});\n        console.log(data);\n        /* const response = await loginService(formData);\r\n        \r\n        const data = response.data;\r\n        if(data.success === true){\r\n          dispatch({\r\n            type: LOGIN_REQUEST,\r\n            payload: {\r\n              ...data,\r\n            }\r\n          })\r\n          if (redirect) {\r\n            router.push(redirect)\r\n          }\r\n          else {\r\n            router.push('/dashboard')\r\n          }\r\n        }\r\n        else{\r\n          setErrMsg('Something went wrong. Please try again');\r\n        }*/\n      } catch (error) {\n        console.log(\"onLoginButtonClick -> error\", error);\n        recaptchaRef.current.reset();\n\n        if (error.response) {\n          setErrMsg(error.response.data.error);\n        }\n      }\n    } else if (!userName) {\n      setErrMsg('Please enter User Name');\n    } else if (!password) {\n      setErrMsg('Please enter Password');\n    } else if (!captchaVerified) {\n      setErrMsg('Please complete Captcha');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      email: 'mukki@chaingames.io',\n      password: 'Password123',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      //email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n      password: Yup.string().max(255).required('Password is required')\n    }),\n    onSubmit: async (values, {\n      setErrors,\n      setStatus,\n      setSubmitting\n    }) => {\n      try {\n        let formData = {\n          username: values.email,\n          reCaptchaToken: ' ',\n          password: values.password\n        };\n        const response = await loginService(formData);\n        console.log(response);\n\n        if (isMountedRef.current) {\n          setStatus({\n            success: true\n          });\n          setSubmitting(false);\n        }\n\n        const data = response.data;\n\n        if (data.success === true) {\n          dispatch({\n            type: LOGIN_REQUEST,\n            payload: { ...data\n            }\n          });\n          history.push('/dashboard');\n          console.log('######## LOGIN SUCCESS! ########');\n        } else {\n          setErrMsg('Something went wrong. Please try again');\n          console.log('######## LOGIN ERROR! ########');\n        }\n      } catch (error) {\n        console.log('++++++++');\n        console.error(error);\n\n        if (isMountedRef.current) {\n          setStatus({\n            success: false\n          });\n          setErrors({\n            submit: error.message\n          });\n          setSubmitting(false);\n        }\n\n        console.log(\"onLoginButtonClick -> error\", error);\n        recaptchaRef.current.reset();\n\n        if (error.response) {\n          setErrMsg(error.response.data.error);\n        }\n      }\n    },\n    children: ({\n      errors,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      isSubmitting,\n      touched,\n      values\n    }) => /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      onSubmit: handleSubmit,\n      className: clsx(classes.root, className),\n      ...rest,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        error: Boolean(touched.email && errors.email),\n        fullWidth: true,\n        autoFocus: true,\n        helperText: touched.email && errors.email,\n        label: \"Email Address\",\n        margin: \"normal\",\n        name: \"email\",\n        onBlur: handleBlur,\n        onChange: handleChange,\n        type: \"email\",\n        value: values.email,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        error: Boolean(touched.password && errors.password),\n        fullWidth: true,\n        helperText: touched.password && errors.password,\n        label: \"Password\",\n        margin: \"normal\",\n        name: \"password\",\n        onBlur: handleBlur,\n        onChange: handleChange,\n        type: \"password\",\n        value: values.password,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), errors.submit && /*#__PURE__*/_jsxDEV(Box, {\n        mt: 3,\n        children: /*#__PURE__*/_jsxDEV(FormHelperText, {\n          error: true,\n          children: errors.submit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          disabled: isSubmitting,\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          severity: \"info\",\n          children: \"Wrong Username or Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(JWTLogin, \"bBNzuhFegTv8bSv+0m8CCB6zyPo=\", false, function () {\n  return [useStyles, useAuth, useIsMountedRef, useHistory];\n});\n\n_c = JWTLogin;\nJWTLogin.propTypes = {\n  className: PropTypes.string\n};\nexport default JWTLogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"JWTLogin\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/views/auth/LoginView/JWTLogin.js"],"names":["React","clsx","useHistory","Yup","PropTypes","Formik","Box","Button","FormHelperText","TextField","makeStyles","Alert","useAuth","useIsMountedRef","ReCAPTCHA","useEffect","useState","useContext","loginService","SignUpRedirectURL","ForgotPasswordRedirectURL","RecaptchaSiteKey","AuthContext","LOGIN_REQUEST","useStyles","root","JWTLogin","className","rest","classes","login","isMountedRef","history","dispatch","userNameFocus","setUserNameFocus","passwordFocus","setPasswordFocus","userName","setUserName","password","setPassword","errMsg","setErrMsg","recaptchaRef","useRef","captchaVerified","setCaptchaVerified","captchaToken","setCaptchaToken","onCaptchaChange","value","document","documentElement","scrollTop","scrollingElement","body","classList","add","onLoginButtonClick","e","preventDefault","formData","username","reCaptchaToken","data","getMyInfoService","console","log","error","current","reset","response","email","submit","object","shape","string","max","required","values","setErrors","setStatus","setSubmitting","success","type","payload","push","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormHelperText,\r\n  TextField,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport useAuth from 'src/hooks/useAuth';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\n\r\n// new\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport { useEffect, useState, useContext } from 'react';\r\n//import { useRouter } from 'next/router'\r\nimport { loginService } from '../../../service/node.service.js';\r\nimport { SignUpRedirectURL, ForgotPasswordRedirectURL, RecaptchaSiteKey } from '../../../config/constants';\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { LOGIN_REQUEST } from '../../../actions/actions';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst JWTLogin = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const { login } = useAuth();\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  // new\r\n  const history = useHistory();\r\n  const {dispatch} = useContext(AuthContext);\r\n  const [userNameFocus, setUserNameFocus] = useState()\r\n  const [passwordFocus, setPasswordFocus] = useState()\r\n  const [userName, setUserName] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [errMsg, setErrMsg] = useState()\r\n  const recaptchaRef = React.useRef();\r\n  const [captchaVerified, setCaptchaVerified] = useState(false);\r\n  const [captchaToken, setCaptchaToken] = useState()\r\n\r\n  const onCaptchaChange = (value) => {\r\n    setCaptchaVerified(value ? true: false);\r\n    setCaptchaToken(value);\r\n  }\r\n\r\n  useEffect(() =>{\r\n    document.documentElement.scrollTop = 0;\r\n    document.scrollingElement.scrollTop = 0;\r\n    document.body.classList.add(\"login-page\");\r\n  }, [])\r\n\r\n  async function onLoginButtonClick(e){\r\n    setErrMsg('');\r\n    e.preventDefault()\r\n    if(userName && password && captchaVerified){\r\n      try{\r\n        let formData = {\r\n          username: userName,\r\n          reCaptchaToken: captchaToken,\r\n          password\r\n        };\r\n\r\n        const {data} = await getMyInfoService({});\r\n        console.log(data)\r\n        /* const response = await loginService(formData);\r\n        \r\n        const data = response.data;\r\n        if(data.success === true){\r\n          dispatch({\r\n            type: LOGIN_REQUEST,\r\n            payload: {\r\n              ...data,\r\n            }\r\n          })\r\n          if (redirect) {\r\n            router.push(redirect)\r\n          }\r\n          else {\r\n            router.push('/dashboard')\r\n          }\r\n        }\r\n        else{\r\n          setErrMsg('Something went wrong. Please try again');\r\n        }*/\r\n      }\r\n      catch(error){\r\n        console.log(\"onLoginButtonClick -> error\", error)\r\n        recaptchaRef.current.reset();\r\n\r\n        if(error.response){\r\n          setErrMsg(error.response.data.error);\r\n        }\r\n        \r\n      }\r\n    }\r\n    else if(!userName){\r\n      setErrMsg('Please enter User Name');\r\n    }\r\n    else if(!password){\r\n      setErrMsg('Please enter Password');\r\n    }\r\n    else if(!captchaVerified){\r\n      setErrMsg('Please complete Captcha');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: 'mukki@chaingames.io',\r\n        password: 'Password123',\r\n        submit: null\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        //email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n        password: Yup.string().max(255).required('Password is required')\r\n      })}\r\n      onSubmit={async (values, {\r\n        setErrors,\r\n        setStatus,\r\n        setSubmitting\r\n      }) => {\r\n        try{\r\n          let formData = {\r\n            username: values.email,\r\n            reCaptchaToken: ' ',\r\n            password: values.password\r\n          };\r\n          \r\n          const response = await loginService(formData);\r\n\r\n          console.log(response)\r\n\r\n          if (isMountedRef.current) {\r\n            setStatus({ success: true });\r\n            setSubmitting(false);\r\n          }\r\n          \r\n          const data = response.data;\r\n          if(data.success === true){\r\n            dispatch({\r\n              type: LOGIN_REQUEST,\r\n              payload: {\r\n                ...data,\r\n              }\r\n            })\r\n            history.push('/dashboard')\r\n\r\n            console.log('######## LOGIN SUCCESS! ########')\r\n          }\r\n          else{\r\n            setErrMsg('Something went wrong. Please try again');\r\n            console.log('######## LOGIN ERROR! ########')\r\n          }\r\n        }\r\n        catch(error){\r\n          console.log('++++++++')\r\n          console.error(error);\r\n          if (isMountedRef.current) {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: error.message });\r\n            setSubmitting(false);\r\n          }\r\n          \r\n          console.log(\"onLoginButtonClick -> error\", error)\r\n          recaptchaRef.current.reset();\r\n  \r\n          if(error.response){\r\n            setErrMsg(error.response.data.error);\r\n          }\r\n          \r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <form\r\n          noValidate\r\n          onSubmit={handleSubmit}\r\n          className={clsx(classes.root, className)}\r\n          {...rest}\r\n        >\r\n          <TextField\r\n            error={Boolean(touched.email && errors.email)}\r\n            fullWidth\r\n            autoFocus\r\n            helperText={touched.email && errors.email}\r\n            label=\"Email Address\"\r\n            margin=\"normal\"\r\n            name=\"email\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"email\"\r\n            value={values.email}\r\n            variant=\"outlined\"\r\n          />\r\n          <TextField\r\n            error={Boolean(touched.password && errors.password)}\r\n            fullWidth\r\n            helperText={touched.password && errors.password}\r\n            label=\"Password\"\r\n            margin=\"normal\"\r\n            name=\"password\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.password}\r\n            variant=\"outlined\"\r\n          />\r\n          {errors.submit && (\r\n            <Box mt={3}>\r\n              <FormHelperText error>\r\n                {errors.submit}\r\n              </FormHelperText>\r\n            </Box>\r\n          )}\r\n          <Box mt={2}>\r\n            <Button\r\n              color=\"secondary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Log In\r\n            </Button>\r\n          </Box>\r\n          <Box mt={2}>\r\n            <Alert\r\n              severity=\"info\"\r\n            >\r\n              Wrong Username or Password\r\n            </Alert>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nJWTLogin.propTypes = {\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default JWTLogin;\r\n"]},"metadata":{},"sourceType":"module"}