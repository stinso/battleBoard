{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\views\\\\cod\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { Box, Card, Container, Divider, Tab, Tabs, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Paper, Typography, makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport PerfectScrollbar from 'react-perfect-scrollbar'; // new\n\nimport * as Sentry from \"@sentry/react\";\nimport { getEventsService } from '../../service/node.service';\nimport { getGameFormatFromIndex } from \"../../utils/helpers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst font = \"'Saira', sans-serif\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    minWidth: '100%',\n    paddingBottom: theme.spacing(3)\n  },\n  image: {\n    width: '100vw'\n  },\n  paper: {\n    backgroundColor: theme.palette.background.dark,\n    elevation: 10\n  },\n  free: {\n    color: theme.palette.secondary.main\n  },\n  priceCell: {\n    color: theme.palette.success.main\n  },\n  title: {\n    fontFamily: font,\n    fontSize: 40,\n    position: 'relative',\n    '&:before': {\n      position: 'absolute',\n      bottom: 8,\n      left: -16,\n      content: '\" \"',\n      height: 40,\n      width: 6,\n      backgroundColor: theme.palette.secondary.main,\n      marginRight: '20px'\n    }\n  }\n}));\nconst events = [{\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"16 of 30\",\n  startTime: \"27th Mar 21:00 CET\",\n  entry: \"Free\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"11 of 30\",\n  startTime: \"27th Mar 19:00 CET\",\n  entry: \"$1.00\",\n  duration: \"120 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Headshots\",\n  format: \"Warzone - Most Headshots\",\n  participants: \"7 of 30\",\n  startTime: \"27th Mar 20:00 CET\",\n  entry: \"$1.00\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"22 of 30\",\n  startTime: \"27th Mar 21:00 CET\",\n  entry: \"Free\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"13 of 30\",\n  startTime: \"28th Mar 21:00 CET\",\n  entry: \"Free\",\n  duration: \"120 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Headshots\",\n  format: \"Warzone - Most Headshots\",\n  participants: \"0 of 30\",\n  startTime: \"28th Mar 21:00 CET\",\n  entry: \"$1.00\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"10 of 30\",\n  startTime: \"28th Mar 21:00 CET\",\n  entry: \"Free\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"1 of 30\",\n  startTime: \"29th Mar 21:00 CET\",\n  entry: \"$1.00\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"5 of 30\",\n  startTime: \"29th Mar 19:00 CET\",\n  entry: \"$1.00\",\n  duration: \"120 Min.\",\n  prizePool: \"$28.50\"\n}, {\n  id: \"MW Warzone Kill Race FREE\",\n  format: \"Warzone - Max Kills\",\n  participants: \"11 of 30\",\n  startTime: \"30th Mar 21:00 CET\",\n  entry: \"Free\",\n  duration: \"60 Min.\",\n  prizePool: \"$28.50\"\n}];\n\nconst CodView = () => {\n  _s();\n\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState('all'); // new\n\n  const [lobbyData, setLobbyData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [allBetAmounts, setAllBetAmounts] = useState([]);\n  const [betAmounts, setBetAmounts] = useState([]);\n  const [selectedBetAmount, setSelectedBetAmount] = useState([]);\n  const [allDates, setAllDates] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState([]);\n  const tabs = [{\n    value: 'all',\n    label: 'All'\n  }, {\n    value: 'free',\n    label: 'Free'\n  }, {\n    value: 'paid',\n    label: 'Paid'\n  }];\n\n  const handleTabsChange = (event, value) => {\n    setCurrentTab(value);\n  };\n\n  async function getLobbyData() {\n    try {\n      var _data$events;\n\n      let gameID = 1; //TODO remove gameID hard coded below and send gameID of appropriate game like GameID for COD is 1\n\n      switch (game) {\n        case 'cod':\n          gameID = 1;\n          break;\n\n        case 'madden2021':\n          gameID = 2;\n          break;\n\n        case 'fifa':\n          gameID = 3;\n          break;\n\n        default:\n          gameID = 1;\n          break;\n      }\n\n      const {\n        data\n      } = await getEventsService({\n        gameID\n      });\n\n      if (data.success === true && ((_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events.length) > 0) {\n        const editedData = data.events.map((row, index) => {\n          return { ...row,\n            date: getDateFromEpoch(row.startTime),\n            time: getTimeFromEpoch(row.startTime),\n            noOfUsersEnrolled: row.noOfUsersEnrolled > row.maxUsers ? row.maxUsers : row.noOfUsersEnrolled,\n            duration: getDuration(row.startTime, row.endTime),\n            betAmount: row.sponsored ? 'Free' : `$${row.betAmount.toFixed(2)}`,\n            prizePool: `$${calculateTotalPrizePool(row.betAmount, row.maxUsers)}`\n          };\n        });\n        editedData.sort((firstRow, secondRow) => {\n          if (firstRow.date === secondRow.date && firstRow.time === secondRow.time) {\n            if (firstRow.betAmount === 'Free') {\n              return -1;\n            } else if (secondRow.betAmount === 'Free') {\n              return 1;\n            } else {\n              return parseInt(firstRow.betAmount.substring(1), 10) - parseInt(secondRow.betAmount.substring(1), 10);\n            }\n          }\n\n          return 0;\n        });\n        setLobbyData(editedData);\n        setSelectedBetAmount(AllBetAmount);\n        setSelectedDate(AllDates);\n        const allPossibleBetAmount = editedData.map(row => row.betAmount);\n        allPossibleBetAmount.sort(function (a, b) {\n          if (a === 'Free') {\n            return -1;\n          } else if (b === 'Free') {\n            return 1;\n          } else {\n            return parseInt(a.substring(1), 10) - parseInt(b.substring(1), 10);\n          }\n        });\n        setAllBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)]);\n        setBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)]);\n        const allPossibleDates = editedData.map(row => row.date);\n        setAllDates([AllDates, ...new Set(allPossibleDates)]);\n        setDates([AllDates, ...new Set(allPossibleDates)]);\n      }\n\n      setIsLoading(false);\n    } catch (error) {\n      console.log(\"ðŸš€ ~ file: GameLobby.jsx ~ line 111 ~ getLobbyData ~ error\", error); // new\n\n      /* Sentry.captureException(error, {\r\n        tags: {\r\n            page: router.asPath,\r\n        },\r\n      }); */\n    }\n  }\n\n  const onBetAmountDropdownClick = row => {\n    setSelectedBetAmount(row.label);\n\n    if (row.label === AllBetAmount) {\n      setBetAmounts([...allBetAmounts]);\n    } else {\n      setBetAmounts([row.label]);\n    }\n  };\n\n  const onDateDropdownClick = row => {\n    setSelectedDate(row.label);\n\n    if (row.label === AllDates) {\n      setDates([...allDates]);\n    } else {\n      setDates([row.label]);\n    }\n  };\n\n  useEffect(() => {\n    getLobbyData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      className: classes.root,\n      title: \"Call of Duty\",\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paper,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Presentation\",\n          src: \"/static/images/cod_banner.jpg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          ml: 2,\n          mt: 5,\n          mb: 3,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            display: \"inline\",\n            variant: \"h2\",\n            color: \"textPrimary\",\n            className: classes.title,\n            children: \"Upcoming Events\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 1,\n          mb: 3,\n          children: [/*#__PURE__*/_jsxDEV(Tabs, {\n            onChange: handleTabsChange,\n            scrollButtons: \"auto\",\n            textColor: \"secondary\",\n            value: currentTab,\n            variant: \"scrollable\",\n            children: tabs.map(tab => /*#__PURE__*/_jsxDEV(Tab, {\n              label: tab.label,\n              value: tab.value\n            }, tab.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.card,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            minWidth: 300,\n            children: [/*#__PURE__*/_jsxDEV(Table, {\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Event Name\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Game Format\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Participants\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 343,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Start Time\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Entry\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Duration\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    align: \"right\",\n                    children: \"Prize Pool\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 355,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: events.map(entry => {\n                  return /*#__PURE__*/_jsxDEV(TableRow, {\n                    hover: true,\n                    children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                      className: classes.rankCell,\n                      children: entry.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 367,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: entry.format\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 370,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: entry.participants\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 373,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: entry.startTime\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      className: entry.entry == 'Free' ? classes.free : '',\n                      children: entry.entry\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      children: entry.duration\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 382,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                      className: classes.priceCell,\n                      align: \"right\",\n                      children: entry.prizePool\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 25\n                    }, this)]\n                  }, entry.id, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 363,\n                    columnNumber: 23\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n              component: \"div\",\n              count: 12,\n              labelRowsPerPage: 'Rows per page'\n              /* onChangePage={handlePageChange}\r\n              onChangeRowsPerPage={handleLimitChange} */\n              ,\n              page: 0,\n              rowsPerPage: 10,\n              rowsPerPageOptions: [5, 10, 25]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 288,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodView, \"hmp9Ql2TXxp6Esz7ovmdCIpghDI=\", false, function () {\n  return [useStyles];\n});\n\n_c = CodView;\nexport default CodView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodView\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/views/cod/index.js"],"names":["React","useEffect","useState","Link","RouterLink","Box","Card","Container","Divider","Tab","Tabs","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Paper","Typography","makeStyles","Page","PerfectScrollbar","Sentry","getEventsService","getGameFormatFromIndex","font","useStyles","theme","root","backgroundColor","palette","background","dark","minHeight","minWidth","paddingBottom","spacing","image","width","paper","elevation","free","color","secondary","main","priceCell","success","title","fontFamily","fontSize","position","bottom","left","content","height","marginRight","events","id","format","participants","startTime","entry","duration","prizePool","CodView","classes","currentTab","setCurrentTab","lobbyData","setLobbyData","isLoading","setIsLoading","allBetAmounts","setAllBetAmounts","betAmounts","setBetAmounts","selectedBetAmount","setSelectedBetAmount","allDates","setAllDates","dates","setDates","selectedDate","setSelectedDate","tabs","value","label","handleTabsChange","event","getLobbyData","gameID","game","data","length","editedData","map","row","index","date","getDateFromEpoch","time","getTimeFromEpoch","noOfUsersEnrolled","maxUsers","getDuration","endTime","betAmount","sponsored","toFixed","calculateTotalPrizePool","sort","firstRow","secondRow","parseInt","substring","AllBetAmount","AllDates","allPossibleBetAmount","a","b","Set","allPossibleDates","error","console","log","onBetAmountDropdownClick","onDateDropdownClick","tab","card","rankCell"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Container,\r\n  Divider,\r\n  Tab,\r\n  Tabs,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Paper,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport Page from 'src/components/Page';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\n\r\n// new\r\nimport * as Sentry from \"@sentry/react\";\r\nimport { getEventsService } from '../../service/node.service';\r\nimport {\r\n  getGameFormatFromIndex\r\n} from \"../../utils/helpers.js\";\r\n\r\nconst font = \"'Saira', sans-serif\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    minWidth: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n  },\r\n  image: {\r\n    width: '100vw'\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    elevation: 10\r\n  },\r\n  free: {\r\n    color: theme.palette.secondary.main\r\n  },\r\n  priceCell: {\r\n    color: theme.palette.success.main\r\n  },\r\n  title: {\r\n    fontFamily: font,\r\n    fontSize: 40,\r\n    position: 'relative',\r\n    '&:before': {\r\n      position: 'absolute',\r\n      bottom: 8,\r\n      left: -16,\r\n      content: '\" \"',\r\n      height: 40,\r\n      width: 6,\r\n      backgroundColor: theme.palette.secondary.main,\r\n      marginRight: '20px'\r\n    }\r\n  }\r\n}));\r\n\r\nconst events = [\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"16 of 30\",\r\n    startTime: \"27th Mar 21:00 CET\",\r\n    entry: \"Free\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"11 of 30\",\r\n    startTime: \"27th Mar 19:00 CET\",\r\n    entry: \"$1.00\",\r\n    duration: \"120 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Headshots\",\r\n    format: \"Warzone - Most Headshots\",\r\n    participants: \"7 of 30\",\r\n    startTime: \"27th Mar 20:00 CET\",\r\n    entry: \"$1.00\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"22 of 30\",\r\n    startTime: \"27th Mar 21:00 CET\",\r\n    entry: \"Free\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"13 of 30\",\r\n    startTime: \"28th Mar 21:00 CET\",\r\n    entry: \"Free\",\r\n    duration: \"120 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Headshots\",\r\n    format: \"Warzone - Most Headshots\",\r\n    participants: \"0 of 30\",\r\n    startTime: \"28th Mar 21:00 CET\",\r\n    entry: \"$1.00\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"10 of 30\",\r\n    startTime: \"28th Mar 21:00 CET\",\r\n    entry: \"Free\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"1 of 30\",\r\n    startTime: \"29th Mar 21:00 CET\",\r\n    entry: \"$1.00\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"5 of 30\",\r\n    startTime: \"29th Mar 19:00 CET\",\r\n    entry: \"$1.00\",\r\n    duration: \"120 Min.\",\r\n    prizePool: \"$28.50\"\r\n  },\r\n  {\r\n    id: \"MW Warzone Kill Race FREE\",\r\n    format: \"Warzone - Max Kills\",\r\n    participants: \"11 of 30\",\r\n    startTime: \"30th Mar 21:00 CET\",\r\n    entry: \"Free\",\r\n    duration: \"60 Min.\",\r\n    prizePool: \"$28.50\"\r\n  }\r\n]\r\n\r\nconst CodView = () => {\r\n  const classes = useStyles();\r\n  const [currentTab, setCurrentTab] = useState('all');\r\n\r\n  // new\r\n  const [lobbyData, setLobbyData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [allBetAmounts, setAllBetAmounts] = useState([]);\r\n  const [betAmounts, setBetAmounts] = useState([]);\r\n  const [selectedBetAmount, setSelectedBetAmount] = useState([]);\r\n  const [allDates, setAllDates] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState([]);\r\n\r\n  const tabs = [\r\n    { value: 'all', label: 'All' },\r\n    { value: 'free', label: 'Free' },\r\n    { value: 'paid', label: 'Paid' }\r\n  ];\r\n\r\n  const handleTabsChange = (event, value) => {\r\n    setCurrentTab(value);\r\n  };\r\n\r\n  async function getLobbyData(){\r\n    try{\r\n      let gameID = 1;\r\n      //TODO remove gameID hard coded below and send gameID of appropriate game like GameID for COD is 1\r\n      switch (game) {\r\n        case 'cod':\r\n          gameID = 1;\r\n          break;\r\n        case 'madden2021':\r\n          gameID = 2;\r\n          break;\r\n        case 'fifa':\r\n          gameID = 3;\r\n          break;\r\n        default:\r\n          gameID = 1;\r\n          break;\r\n      }\r\n      const {data} = await getEventsService({gameID})\r\n      if (data.success === true && data.events?.length > 0) {\r\n        const editedData = data.events.map((row, index) => {\r\n          return {\r\n            ...row,\r\n            date: getDateFromEpoch(row.startTime),\r\n            time: getTimeFromEpoch(row.startTime),\r\n            noOfUsersEnrolled: row.noOfUsersEnrolled > row.maxUsers ? row.maxUsers : row.noOfUsersEnrolled, \r\n            duration: getDuration(row.startTime, row.endTime),\r\n            betAmount: row.sponsored ? 'Free' : `$${(row.betAmount).toFixed(2)}`,\r\n            prizePool: `$${(calculateTotalPrizePool(row.betAmount,\r\n              row.maxUsers))}`,\r\n          };\r\n        })\r\n        editedData.sort((firstRow, secondRow) => {\r\n          if (firstRow.date === secondRow.date\r\n            && firstRow.time === secondRow.time) {\r\n              if (firstRow.betAmount === 'Free') {\r\n                return -1\r\n              }\r\n              else if (secondRow.betAmount === 'Free') {\r\n                return 1;\r\n              }\r\n              else {\r\n                return parseInt(firstRow.betAmount.substring(1), 10) - parseInt(secondRow.betAmount.substring(1), 10)\r\n              }\r\n            }\r\n          return 0;\r\n        })\r\n        setLobbyData(editedData)\r\n        setSelectedBetAmount(AllBetAmount)\r\n        setSelectedDate(AllDates)\r\n        const allPossibleBetAmount = editedData.map((row) => row.betAmount)\r\n        allPossibleBetAmount.sort(function (a, b) {\r\n          if (a === 'Free') {\r\n            return -1\r\n          }\r\n          else if (b === 'Free') {\r\n            return 1;\r\n          }\r\n          else {\r\n            return parseInt(a.substring(1), 10) - parseInt(b.substring(1), 10)\r\n          }\r\n        })\r\n        setAllBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)])\r\n        setBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)]);\r\n        const allPossibleDates = editedData.map((row) => row.date)\r\n        setAllDates([AllDates, ...new Set(allPossibleDates)])\r\n        setDates([AllDates, ...new Set(allPossibleDates)]);\r\n      } \r\n      setIsLoading(false);\r\n    }\r\n    catch (error) {\r\n      console.log(\"ðŸš€ ~ file: GameLobby.jsx ~ line 111 ~ getLobbyData ~ error\", error)\r\n      // new\r\n      /* Sentry.captureException(error, {\r\n        tags: {\r\n            page: router.asPath,\r\n        },\r\n      }); */\r\n    }\r\n  }\r\n  const onBetAmountDropdownClick = (row) => {\r\n    setSelectedBetAmount(row.label);\r\n    if (row.label === AllBetAmount) {\r\n      setBetAmounts([...allBetAmounts]);\r\n    } else {\r\n      setBetAmounts([row.label]);\r\n    }\r\n  };\r\n  const onDateDropdownClick = (row) => {\r\n    setSelectedDate(row.label);\r\n    if (row.label === AllDates) {\r\n      setDates([...allDates]);\r\n    } else {\r\n      setDates([row.label]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLobbyData();\r\n  }, []);\r\n\r\n  return (\r\n    <PerfectScrollbar>\r\n    <Page\r\n      className={classes.root}\r\n      title=\"Call of Duty\"\r\n    >\r\n      \r\n      <Paper className={classes.paper} >\r\n        <img\r\n          alt=\"Presentation\"\r\n          src=\"/static/images/cod_banner.jpg\"\r\n        />      \r\n      </Paper>\r\n      <Container maxWidth=\"lg\">\r\n        <Box ml={2} mt={5} mb={3}>\r\n          <Typography\r\n            display=\"inline\"\r\n            variant=\"h2\"\r\n            color=\"textPrimary\"\r\n            className={classes.title}\r\n          >\r\n            Upcoming Events\r\n          </Typography>\r\n        </Box>\r\n        <Box mt={1} mb={3}>\r\n          <Tabs\r\n            onChange={handleTabsChange}\r\n            scrollButtons=\"auto\"\r\n            textColor=\"secondary\"\r\n            value={currentTab}\r\n            variant=\"scrollable\"\r\n          >\r\n            {tabs.map((tab) => (\r\n              <Tab\r\n                key={tab.value}\r\n                label={tab.label}\r\n                value={tab.value}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n          <Divider />\r\n        </Box>\r\n        <Card\r\n          className={classes.card}\r\n        >\r\n          \r\n            <Box minWidth={300} >\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>\r\n                      Event Name\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Game Format\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Participants\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Start Time\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Entry\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Duration\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      Prize Pool\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {events.map((entry) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        key={entry.id}\r\n                      >\r\n                        <TableCell className={classes.rankCell}>\r\n                          {entry.id}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {entry.format}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {entry.participants}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {entry.startTime}\r\n                        </TableCell>\r\n                        <TableCell className={entry.entry == 'Free' ? classes.free : ''}>\r\n                          {entry.entry}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {entry.duration}\r\n                        </TableCell>\r\n                        <TableCell className={classes.priceCell} align=\"right\">\r\n                          {entry.prizePool}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n              <TablePagination\r\n                component=\"div\"\r\n                count={12}\r\n                labelRowsPerPage={'Rows per page'}\r\n                /* onChangePage={handlePageChange}\r\n                onChangeRowsPerPage={handleLimitChange} */\r\n                page={0}\r\n                rowsPerPage={10}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n              />\r\n            </Box>\r\n          \r\n        </Card>\r\n      </Container>\r\n      \r\n    </Page>\r\n    </PerfectScrollbar>\r\n  );\r\n};\r\n\r\nexport default CodView;\r\n"]},"metadata":{},"sourceType":"module"}