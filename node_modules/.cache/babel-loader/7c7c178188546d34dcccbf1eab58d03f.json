{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\contexts\\\\SettingsContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { THEMES } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultSettings = {\n  theme: THEMES.DARK\n};\nexport const restoreSettings = () => {\n  let settings = null;\n\n  try {\n    const storedData = window.localStorage.getItem('settings');\n\n    if (storedData) {\n      settings = JSON.parse(storedData);\n    }\n  } catch (err) {\n    console.error(err); // If stored data is not a strigified JSON this will fail,\n    // that's why we catch the error\n  }\n\n  return settings;\n};\nexport const storeSettings = settings => {\n  window.localStorage.setItem('settings', JSON.stringify(settings));\n};\nconst SettingsContext = /*#__PURE__*/createContext({\n  settings: defaultSettings,\n  saveSettings: () => {}\n});\nexport const SettingsProvider = ({\n  settings,\n  children\n}) => {\n  _s();\n\n  const [currentSettings, setCurrentSettings] = useState(settings || defaultSettings);\n\n  const handleSaveSettings = (update = {}) => {\n    const mergedSettings = _.merge({}, currentSettings, update);\n\n    setCurrentSettings(mergedSettings);\n    storeSettings(mergedSettings);\n  };\n\n  useEffect(() => {\n    const restoredSettings = restoreSettings();\n\n    if (restoredSettings) {\n      setCurrentSettings(restoredSettings);\n    }\n  }, []);\n  useEffect(() => {\n    document.dir = currentSettings.direction;\n  }, [currentSettings]);\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: {\n      settings: currentSettings,\n      saveSettings: handleSaveSettings\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsProvider, \"lUb4exchd+zu7h5EqIL09YWleZ0=\");\n\n_c = SettingsProvider;\nexport const SettingsConsumer = SettingsContext.Consumer;\nexport default SettingsContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/contexts/SettingsContext.js"],"names":["React","createContext","useEffect","useState","_","THEMES","defaultSettings","theme","DARK","restoreSettings","settings","storedData","window","localStorage","getItem","JSON","parse","err","console","error","storeSettings","setItem","stringify","SettingsContext","saveSettings","SettingsProvider","children","currentSettings","setCurrentSettings","handleSaveSettings","update","mergedSettings","merge","restoredSettings","document","dir","direction","SettingsConsumer","Consumer"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,SAFF,EAGEC,QAHF,QAIO,OAJP;AAKA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,MAAT,QAAuB,cAAvB;;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,KAAK,EAAEF,MAAM,CAACG;AADQ,CAAxB;AAIA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAI;AACF,UAAMC,UAAU,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,CAAnB;;AAEA,QAAIH,UAAJ,EAAgB;AACdD,MAAAA,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWL,UAAX,CAAX;AACD;AACF,GAND,CAME,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd,EADY,CAEZ;AACA;AACD;;AAED,SAAOP,QAAP;AACD,CAhBM;AAkBP,OAAO,MAAMU,aAAa,GAAIV,QAAD,IAAc;AACzCE,EAAAA,MAAM,CAACC,YAAP,CAAoBQ,OAApB,CAA4B,UAA5B,EAAwCN,IAAI,CAACO,SAAL,CAAeZ,QAAf,CAAxC;AACD,CAFM;AAIP,MAAMa,eAAe,gBAAGtB,aAAa,CAAC;AACpCS,EAAAA,QAAQ,EAAEJ,eAD0B;AAEpCkB,EAAAA,YAAY,EAAE,MAAM,CAAG;AAFa,CAAD,CAArC;AAKA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAAEf,EAAAA,QAAF;AAAYgB,EAAAA;AAAZ,CAAD,KAA4B;AAAA;;AAC1D,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCzB,QAAQ,CAACO,QAAQ,IAAIJ,eAAb,CAAtD;;AAEA,QAAMuB,kBAAkB,GAAG,CAACC,MAAM,GAAG,EAAV,KAAiB;AAC1C,UAAMC,cAAc,GAAG3B,CAAC,CAAC4B,KAAF,CAAQ,EAAR,EAAYL,eAAZ,EAA6BG,MAA7B,CAAvB;;AAEAF,IAAAA,kBAAkB,CAACG,cAAD,CAAlB;AACAX,IAAAA,aAAa,CAACW,cAAD,CAAb;AACD,GALD;;AAOA7B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,gBAAgB,GAAGxB,eAAe,EAAxC;;AAEA,QAAIwB,gBAAJ,EAAsB;AACpBL,MAAAA,kBAAkB,CAACK,gBAAD,CAAlB;AACD;AACF,GANQ,EAMN,EANM,CAAT;AAQA/B,EAAAA,SAAS,CAAC,MAAM;AACdgC,IAAAA,QAAQ,CAACC,GAAT,GAAeR,eAAe,CAACS,SAA/B;AACD,GAFQ,EAEN,CAACT,eAAD,CAFM,CAAT;AAIA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AACE,IAAA,KAAK,EAAE;AACLjB,MAAAA,QAAQ,EAAEiB,eADL;AAELH,MAAAA,YAAY,EAAEK;AAFT,KADT;AAAA,cAMGH;AANH;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAhCM;;GAAMD,gB;;KAAAA,gB;AAkCb,OAAO,MAAMY,gBAAgB,GAAGd,eAAe,CAACe,QAAzC;AAEP,eAAef,eAAf","sourcesContent":["import React, {\r\n  createContext,\r\n  useEffect,\r\n  useState\r\n} from 'react';\r\nimport _ from 'lodash';\r\nimport { THEMES } from '../constants';\r\n\r\nconst defaultSettings = {\r\n  theme: THEMES.DARK\r\n};\r\n\r\nexport const restoreSettings = () => {\r\n  let settings = null;\r\n\r\n  try {\r\n    const storedData = window.localStorage.getItem('settings');\r\n\r\n    if (storedData) {\r\n      settings = JSON.parse(storedData);\r\n    }\r\n  } catch (err) {\r\n    console.error(err);\r\n    // If stored data is not a strigified JSON this will fail,\r\n    // that's why we catch the error\r\n  }\r\n\r\n  return settings;\r\n};\r\n\r\nexport const storeSettings = (settings) => {\r\n  window.localStorage.setItem('settings', JSON.stringify(settings));\r\n};\r\n\r\nconst SettingsContext = createContext({\r\n  settings: defaultSettings,\r\n  saveSettings: () => { }\r\n});\r\n\r\nexport const SettingsProvider = ({ settings, children }) => {\r\n  const [currentSettings, setCurrentSettings] = useState(settings || defaultSettings);\r\n\r\n  const handleSaveSettings = (update = {}) => {\r\n    const mergedSettings = _.merge({}, currentSettings, update);\r\n\r\n    setCurrentSettings(mergedSettings);\r\n    storeSettings(mergedSettings);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const restoredSettings = restoreSettings();\r\n\r\n    if (restoredSettings) {\r\n      setCurrentSettings(restoredSettings);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    document.dir = currentSettings.direction;\r\n  }, [currentSettings]);\r\n\r\n  return (\r\n    <SettingsContext.Provider\r\n      value={{\r\n        settings: currentSettings,\r\n        saveSettings: handleSaveSettings\r\n      }}\r\n    >\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport const SettingsConsumer = SettingsContext.Consumer;\r\n\r\nexport default SettingsContext;\r\n"]},"metadata":{},"sourceType":"module"}