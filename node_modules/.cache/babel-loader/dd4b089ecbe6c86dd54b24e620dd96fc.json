{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\views\\\\auth\\\\VerifyForgotPasswordView\\\\VerifyForgotPassword.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { Box, Button, TextField, makeStyles } from '@material-ui/core';\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\nimport { LOGOUT_REQUEST } from '../../../actions/actions.js';\nimport { verifyForgotPasswordTokenService, resetForgottenPasswordService } from '../../../service/node.service';\nimport { AuthContext } from \"../../../context/AuthContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst useQuery = () => {\n  _s();\n\n  return new URLSearchParams(useLocation().search);\n};\n\n_s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\nconst VerifyForgotPassword = ({\n  className,\n  ...rest\n}) => {\n  _s2();\n\n  const classes = useStyles();\n  const isMountedRef = useIsMountedRef();\n  const history = useHistory();\n  const [token, setToken] = useState('');\n  const query = useQuery();\n\n  const verifyToken = async () => {\n    try {\n      const {\n        data\n      } = await verifyForgotPasswordTokenService({\n        token\n      });\n\n      if (data.success === true) {//setSubmitMessage('Token Valid')\n      }\n    } catch (error) {\n      var _error$response;\n\n      console.log(error);\n\n      if ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) {\n        setSubmitMessage(error.response.data.error);\n      } else {\n        setSubmitMessage('Something went wrong!');\n      }\n    }\n  };\n\n  useEffect(() => {\n    let token = query.get(\"token\");\n    setToken(token);\n    console.log('token: ' + token);\n  }, []);\n  useEffect(() => {\n    if (token) {\n      verifyToken();\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      password: '',\n      submit: null\n    },\n    validationSchema: Yup.object().shape({\n      password: Yup.string().min(7).max(255).required('Password is required')\n    }),\n    onSubmit: async (values, {\n      setErrors,\n      setStatus,\n      setSubmitting\n    }) => {\n      try {\n        const {\n          data\n        } = await verifyForgotPasswordTokenService({\n          token\n        });\n\n        if (data.success === true) {\n          setStatus({\n            success: true\n          });\n          setSubmitting(false);\n        } else {\n          setStatus({\n            success: false\n          });\n          setErrors({\n            submit: data.error\n          });\n          setSubmitting(false);\n        }\n      } catch (err) {\n        console.error(err);\n        setStatus({\n          success: false\n        });\n        setErrors({\n          submit: err.message\n        });\n        setSubmitting(false);\n      }\n    },\n    children: ({\n      errors,\n      handleBlur,\n      handleChange,\n      handleSubmit,\n      isSubmitting,\n      touched,\n      values\n    }) => /*#__PURE__*/_jsxDEV(\"form\", {\n      noValidate: true,\n      className: clsx(classes.root, className),\n      onSubmit: handleSubmit,\n      ...rest,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        error: Boolean(touched.password && errors.password),\n        fullWidth: true,\n        helperText: touched.password && errors.password,\n        label: \"New Password\",\n        margin: \"normal\",\n        name: \"password\",\n        onBlur: handleBlur,\n        onChange: handleChange,\n        type: \"password\",\n        value: values.password,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 2,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"secondary\",\n          disabled: isSubmitting,\n          fullWidth: true,\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(VerifyForgotPassword, \"UrxvrRNRcj0VGOFo7s9++UCUVAk=\", false, function () {\n  return [useStyles, useIsMountedRef, useHistory, useQuery];\n});\n\n_c = VerifyForgotPassword;\nVerifyForgotPassword.propTypes = {\n  className: PropTypes.string\n};\nexport default VerifyForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyForgotPassword\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/views/auth/VerifyForgotPasswordView/VerifyForgotPassword.js"],"names":["React","useEffect","useState","clsx","Yup","PropTypes","useHistory","useLocation","Formik","Box","Button","TextField","makeStyles","useIsMountedRef","LOGOUT_REQUEST","verifyForgotPasswordTokenService","resetForgottenPasswordService","AuthContext","useStyles","root","useQuery","URLSearchParams","search","VerifyForgotPassword","className","rest","classes","isMountedRef","history","token","setToken","query","verifyToken","data","success","error","console","log","response","setSubmitMessage","get","password","submit","object","shape","string","min","max","required","values","setErrors","setStatus","setSubmitting","err","message","errors","handleBlur","handleChange","handleSubmit","isSubmitting","touched","Boolean","propTypes"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { \r\n  useHistory,\r\n  useLocation\r\n} from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  makeStyles\r\n} from '@material-ui/core';\r\nimport useIsMountedRef from 'src/hooks/useIsMountedRef';\r\nimport {LOGOUT_REQUEST} from '../../../actions/actions.js';\r\nimport {\r\n    verifyForgotPasswordTokenService,\r\n    resetForgottenPasswordService\r\n} from '../../../service/node.service';\r\nimport { AuthContext } from \"../../../context/AuthContext\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {}\r\n}));\r\n\r\nconst useQuery = () => {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nconst VerifyForgotPassword = ({ className, ...rest }) => {\r\n  const classes = useStyles();\r\n  const isMountedRef = useIsMountedRef();\r\n  const history = useHistory();\r\n  const [token, setToken] = useState('');\r\n  const query = useQuery();\r\n\r\n  \r\n\r\n  const verifyToken = async () => {\r\n    try {\r\n      const { data } = await verifyForgotPasswordTokenService({ token })\r\n      if (data.success === true) {\r\n          //setSubmitMessage('Token Valid')\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n\r\n      if (error.response?.data) {\r\n          setSubmitMessage(error.response.data.error)\r\n      } else {\r\n          setSubmitMessage('Something went wrong!')\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let token = query.get(\"token\");\r\n    setToken(token);\r\n    console.log('token: ' + token);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n        verifyToken();\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        password: '',\r\n        submit: null\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        password: Yup.string().min(7).max(255).required('Password is required'),\r\n      })}\r\n      onSubmit={async (values, {\r\n        setErrors,\r\n        setStatus,\r\n        setSubmitting\r\n      }) => {\r\n        try {\r\n          const { data } = await verifyForgotPasswordTokenService({ token })\r\n          if (data.success === true) {\r\n              setStatus({ success: true });\r\n              setSubmitting(false);\r\n          } else {\r\n            setStatus({ success: false });\r\n            setErrors({ submit: data.error });\r\n            setSubmitting(false);\r\n          }\r\n        } catch (err) {\r\n          console.error(err);\r\n          setStatus({ success: false });\r\n          setErrors({ submit: err.message });\r\n          setSubmitting(false);\r\n        }\r\n      }}\r\n    >\r\n      {({\r\n        errors,\r\n        handleBlur,\r\n        handleChange,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        touched,\r\n        values\r\n      }) => (\r\n        <form\r\n          noValidate\r\n          className={clsx(classes.root, className)}\r\n          onSubmit={handleSubmit}\r\n          {...rest}\r\n        >\r\n          <TextField\r\n            error={Boolean(touched.password && errors.password)}\r\n            fullWidth\r\n            helperText={touched.password && errors.password}\r\n            label=\"New Password\"\r\n            margin=\"normal\"\r\n            name=\"password\"\r\n            onBlur={handleBlur}\r\n            onChange={handleChange}\r\n            type=\"password\"\r\n            value={values.password}\r\n            variant=\"outlined\"\r\n          />          \r\n          <Box mt={2}>\r\n            <Button\r\n              color=\"secondary\"\r\n              disabled={isSubmitting}\r\n              fullWidth\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </Box>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nVerifyForgotPassword.propTypes = {\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default VerifyForgotPassword;\r\n"]},"metadata":{},"sourceType":"module"}