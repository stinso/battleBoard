{"ast":null,"code":"import React, { useMemo, useEffect, useContext, useReducer as useReducer$1, useState as useState$1 } from 'react';\nimport { createStore } from 'redux';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar StateInspectorContext = /*#__PURE__*/React.createContext(undefined);\n\nvar omit = function omit(obj, keyToRemove) {\n  return Object.keys(obj).filter(function (key) {\n    return key !== keyToRemove;\n  }).reduce(function (acc, key) {\n    acc[key] = obj[key];\n    return acc;\n  }, {});\n};\n\nvar StateInspector = function StateInspector(_ref) {\n  var name = _ref.name,\n      _ref$initialState = _ref.initialState,\n      initialState = _ref$initialState === void 0 ? {} : _ref$initialState,\n      children = _ref.children;\n  var store = useMemo(function () {\n    if (typeof window === \"undefined\" || !window.__REDUX_DEVTOOLS_EXTENSION__) {\n      return undefined;\n    }\n\n    var registeredReducers = {};\n\n    var storeReducer = function storeReducer(state, action) {\n      var actionReducerId = action.type.split(\"/\")[0];\n      var isInitAction = /\\/_init$/.test(action.type);\n      var isTeardownAction = /\\/_teardown$/.test(action.type);\n      var currentState = isTeardownAction ? omit(state, actionReducerId) : _extends({}, state);\n      return Object.keys(registeredReducers).reduce(function (acc, reducerId) {\n        var reducer = registeredReducers[reducerId];\n        var reducerState = state[reducerId];\n        var reducerAction = action.payload;\n        var isForCurrentReducer = actionReducerId === reducerId;\n\n        if (isForCurrentReducer) {\n          acc[reducerId] = isInitAction ? action.payload : reducer(reducerState, reducerAction);\n        } else {\n          acc[reducerId] = reducerState;\n        }\n\n        return acc;\n      }, currentState);\n    };\n\n    var store = createStore(storeReducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__({\n      name: name || \"React state\",\n      actionsBlacklist: [\"/_init\", \"/_teardown\"]\n    }));\n\n    store.registerHookedReducer = function (reducer, initialState, reducerId) {\n      registeredReducers[reducerId] = reducer;\n      store.dispatch({\n        type: reducerId + \"/_init\",\n        payload: initialState\n      });\n      return function () {\n        delete registeredReducers[reducerId];\n        store.dispatch({\n          type: reducerId + \"/_teardown\"\n        });\n      };\n    };\n\n    return store;\n  }, []);\n  useEffect(function () {\n    store && store.dispatch({\n      type: \"REINSPECT/@@INIT\",\n      payload: {}\n    });\n  }, []);\n  return React.createElement(StateInspectorContext.Provider, {\n    value: store\n  }, children);\n};\n/* eslint-disable react-hooks/rules-of-hooks */\n\n\nfunction useHookedReducer(reducer, initialState, store, reducerId) {\n  var initialReducerState = useMemo(function () {\n    var initialStateInStore = store.getState()[reducerId];\n    return initialStateInStore === undefined ? initialState : initialStateInStore;\n  }, []);\n\n  var _useState = useState$1(initialReducerState),\n      localState = _useState[0],\n      setState = _useState[1];\n\n  var dispatch = useMemo(function () {\n    var dispatch = function dispatch(action) {\n      if (action && typeof action === \"object\" && typeof action.type === \"string\") {\n        store.dispatch({\n          type: reducerId + \"/\" + action.type,\n          payload: action\n        });\n      } else {\n        store.dispatch({\n          type: reducerId,\n          payload: action\n        });\n      }\n    };\n\n    return dispatch;\n  }, []);\n  useEffect(function () {\n    var teardown = store.registerHookedReducer(reducer, initialReducerState, reducerId);\n    var lastReducerState = localState;\n    var unsubscribe = store.subscribe(function () {\n      var storeState = store.getState();\n      var reducerState = storeState[reducerId];\n\n      if (lastReducerState !== reducerState) {\n        setState(reducerState);\n      }\n\n      lastReducerState = reducerState;\n    });\n    return function () {\n      unsubscribe();\n      teardown();\n    };\n  }, []);\n  return [localState, dispatch];\n}\n\nfunction useReducer(reducer, initialState) {\n  var id;\n  var initializer = arguments.length <= 2 ? undefined : arguments[2];\n\n  if ((arguments.length <= 2 ? 0 : arguments.length - 2) === 2) {\n    initializer = arguments.length <= 2 ? undefined : arguments[2];\n    id = arguments.length <= 3 ? undefined : arguments[3];\n  } else if (typeof (arguments.length <= 2 ? undefined : arguments[2]) === \"string\" || typeof (arguments.length <= 2 ? undefined : arguments[2]) === \"number\") {\n    id = arguments.length <= 2 ? undefined : arguments[2];\n  } else {\n    initializer = arguments.length <= 2 ? undefined : arguments[2];\n    id = arguments.length <= 3 ? undefined : arguments[3];\n  }\n\n  var store = useContext(StateInspectorContext);\n  var initializedState = initializer ? initializer(initialState) : initialState;\n  return store && id ? useHookedReducer(reducer, initializedState, store, id) : useReducer$1(reducer, initialState, initializer);\n}\n/* eslint-disable react-hooks/rules-of-hooks */\n\n\nfunction stateReducer(state, action) {\n  return typeof action === \"function\" ? action(state) : action;\n}\n\nvar useState = function useState(initialState, id) {\n  var inspectorStore = useContext(StateInspectorContext); // Keeping the first values\n\n  var _useMemo = useMemo(function () {\n    return [inspectorStore, id];\n  }, []),\n      store = _useMemo[0],\n      reducerId = _useMemo[1];\n\n  if (!store || !reducerId) {\n    return useState$1(initialState);\n  }\n\n  var finalInitialState = useMemo(function () {\n    return typeof initialState === \"function\" ? initialState() : initialState;\n  }, []);\n  return useHookedReducer(stateReducer, finalInitialState, store, reducerId);\n};\n\nexport { StateInspector, useReducer, useState };","map":{"version":3,"sources":["../src/context.ts","../src/StateInspector.tsx","../src/useReducer.ts","../src/useState.ts"],"names":["StateInspectorContext","React","omit","key","acc","obj","StateInspector","name","initialState","children","store","useMemo","window","registeredReducers","storeReducer","actionReducerId","action","isInitAction","isTeardownAction","currentState","reducer","reducerState","state","reducerAction","isForCurrentReducer","createStore","actionsBlacklist","type","reducerId","payload","useEffect","value","useHookedReducer","initialReducerState","initialStateInStore","localState","setState","useState","dispatch","teardown","lastReducerState","unsubscribe","storeState","useReducer","initializer","id","useContext","initializedState","useReactReducer","inspectorStore","useReactState","finalInitialState"],"mappings":"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","sourcesContent":["import React, { Reducer } from \"react\"\nimport { Store } from \"redux\"\n\ntype UnsubscribeFn = () => void\n\nexport type EnhancedStore = Store & {\n  registerHookedReducer: (\n    reducer: Reducer<any, any>,\n    initialState: any,\n    reducerId: string | number\n  ) => UnsubscribeFn\n}\n\nexport const StateInspectorContext = React.createContext<\n  EnhancedStore | undefined\n>(undefined)\n","import React, { ReducerAction, Reducer, useMemo, useEffect } from \"react\"\nimport { createStore } from \"redux\"\nimport { EnhancedStore, StateInspectorContext } from \"./context\"\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__?: any\n  }\n}\n\ninterface StateInspectorProps {\n  name?: string\n  initialState?: any\n}\n\ninterface StoreReducerAction {\n  type: string\n  payload: any\n}\n\nconst omit = (obj: Record<string, any>, keyToRemove: string) =>\n  Object.keys(obj)\n    .filter(key => key !== keyToRemove)\n    .reduce<Record<string, any>>((acc, key) => {\n      acc[key] = obj[key]\n\n      return acc\n    }, {})\n\nexport const StateInspector: React.FC<StateInspectorProps> = ({\n  name,\n  initialState = {},\n  children\n}) => {\n  const store = useMemo<EnhancedStore | undefined>(() => {\n    if (typeof window === \"undefined\" || !window.__REDUX_DEVTOOLS_EXTENSION__) {\n      return undefined\n    }\n\n    const registeredReducers: Record<\n      string | number,\n      Reducer<any, ReducerAction<any>>\n    > = {}\n\n    const storeReducer: Reducer<any, StoreReducerAction> = (state, action) => {\n      const actionReducerId = action.type.split(\"/\")[0]\n      const isInitAction = /\\/_init$/.test(action.type)\n      const isTeardownAction = /\\/_teardown$/.test(action.type)\n\n      const currentState = isTeardownAction\n        ? omit(state, actionReducerId)\n        : { ...state }\n\n      return Object.keys(registeredReducers).reduce((acc, reducerId) => {\n        const reducer = registeredReducers[reducerId]\n        const reducerState = state[reducerId]\n        const reducerAction = action.payload\n        const isForCurrentReducer = actionReducerId === reducerId\n\n        if (isForCurrentReducer) {\n          acc[reducerId] = isInitAction\n            ? action.payload\n            : reducer(reducerState, reducerAction)\n        } else {\n          acc[reducerId] = reducerState\n        }\n\n        return acc\n      }, currentState)\n    }\n\n    const store: EnhancedStore = createStore(\n      storeReducer,\n      initialState,\n      window.__REDUX_DEVTOOLS_EXTENSION__({\n        name: name || \"React state\",\n        actionsBlacklist: [\"/_init\", \"/_teardown\"]\n      })\n    )\n\n    store.registerHookedReducer = (reducer, initialState, reducerId) => {\n      registeredReducers[reducerId] = reducer\n\n      store.dispatch({\n        type: `${reducerId}/_init`,\n        payload: initialState\n      })\n\n      return () => {\n        delete registeredReducers[reducerId]\n\n        store.dispatch({\n          type: `${reducerId}/_teardown`\n        })\n      }\n    }\n\n    return store\n  }, [])\n\n  useEffect(() => {\n    store && store.dispatch({ type: \"REINSPECT/@@INIT\", payload: {} })\n  }, [])\n\n  return (\n    <StateInspectorContext.Provider value={store}>\n      {children}\n    </StateInspectorContext.Provider>\n  )\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n  useReducer as useReactReducer,\n  Reducer,\n  useMemo,\n  Dispatch,\n  useState,\n  useEffect,\n  useContext,\n  ReducerState,\n  ReducerAction\n} from \"react\"\nimport { StateInspectorContext, EnhancedStore } from \"./context\"\n\nexport function useHookedReducer<S, A>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  store: EnhancedStore,\n  reducerId: string | number\n): [S, Dispatch<A>] {\n  const initialReducerState = useMemo(() => {\n    const initialStateInStore = store.getState()[reducerId]\n    return initialStateInStore === undefined\n      ? initialState\n      : initialStateInStore\n  }, [])\n\n  const [localState, setState] = useState<S>(initialReducerState)\n\n  const dispatch = useMemo<Dispatch<A>>(() => {\n    const dispatch = (action: any) => {\n      if (\n        action &&\n        typeof action === \"object\" &&\n        typeof action.type === \"string\"\n      ) {\n        store.dispatch({\n          type: `${reducerId}/${action.type}`,\n          payload: action\n        })\n      } else {\n        store.dispatch({\n          type: reducerId,\n          payload: action\n        })\n      }\n    }\n\n    return dispatch\n  }, [])\n\n  useEffect(() => {\n    const teardown = store.registerHookedReducer(\n      reducer,\n      initialReducerState,\n      reducerId\n    )\n\n    let lastReducerState = localState\n    const unsubscribe = store.subscribe(() => {\n      const storeState: any = store.getState()\n      const reducerState = storeState[reducerId]\n\n      if (lastReducerState !== reducerState) {\n        setState(reducerState)\n      }\n\n      lastReducerState = reducerState\n    })\n\n    return () => {\n      unsubscribe()\n      teardown()\n    }\n  }, [])\n\n  return [localState, dispatch]\n}\n\nexport function useReducer<R extends Reducer<any, any>>(\n  reducer: R,\n  initialState: ReducerState<R>,\n  id?: string | number\n): [ReducerState<R>, Dispatch<ReducerAction<R>>]\nexport function useReducer<R extends Reducer<any, any>, I>(\n  reducer: R,\n  initialState: I,\n  initializer: (arg: I) => ReducerState<R>,\n  id?: string | number\n): [ReducerState<R>, Dispatch<ReducerAction<R>>]\nexport function useReducer<R extends Reducer<any, any>, I>(\n  reducer: R,\n  initialState: I & ReducerState<R>,\n  initializer: (arg: I & ReducerState<R>) => ReducerState<R>,\n  id?: string | number\n): [ReducerState<R>, Dispatch<ReducerAction<R>>]\nexport function useReducer<R extends Reducer<any, any>, I>(\n  reducer: R,\n  initialState: I & ReducerState<R>,\n  ...args: any[]\n) {\n  let id: string | number | undefined\n  let initializer: (arg: I | (I & ReducerState<R>)) => ReducerState<R> = args[0]\n\n  if (args.length === 2) {\n    initializer = args[0]\n    id = args[1]\n  } else if (typeof args[0] === \"string\" || typeof args[0] === \"number\") {\n    id = args[0]\n  } else {\n    initializer = args[0]\n    id = args[1]\n  }\n\n  const store = useContext(StateInspectorContext)\n\n  const initializedState = initializer\n    ? initializer(initialState)\n    : initialState\n\n  return store && id\n    ? useHookedReducer(reducer, initializedState, store, id)\n    : useReactReducer(reducer, initialState, initializer)\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport { useHookedReducer } from \"./useReducer\"\nimport { useMemo, useContext, useState as useReactState } from \"react\"\nimport { EnhancedStore, StateInspectorContext } from \"./context\"\n\ntype StateAction<S> = S | ((s: S) => S)\n\nfunction stateReducer<S>(state: S, action: StateAction<S>): S {\n  return typeof action === \"function\" ? (action as (s: S) => S)(state) : action\n}\n\nexport const useState = <S>(\n  initialState: S | (() => S),\n  id: string | number\n) => {\n  const inspectorStore = useContext(StateInspectorContext)\n  // Keeping the first values\n  const [store, reducerId] = useMemo<\n    [EnhancedStore | undefined, string | number]\n  >(() => [inspectorStore, id], [])\n\n  if (!store || !reducerId) {\n    return useReactState<S>(initialState)\n  }\n\n  const finalInitialState = useMemo<S>(\n    () =>\n      typeof initialState === \"function\"\n        ? (initialState as () => S)()\n        : initialState,\n    []\n  )\n\n  return useHookedReducer<S, any>(\n    stateReducer,\n    finalInitialState,\n    store,\n    reducerId\n  )\n}\n"]},"metadata":{},"sourceType":"module"}