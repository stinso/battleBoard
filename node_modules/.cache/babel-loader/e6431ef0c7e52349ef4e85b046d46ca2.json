{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\components\\\\Carousel\\\\Carousel.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './carousel.css';\nimport { ChevronLeft, ChevronRight } from '@material-ui/icons';\nimport { SvgIcon } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Carousel = props => {\n  _s();\n\n  const {\n    children,\n    show,\n    infiniteLoop\n  } = props;\n  const [currentIndex, setCurrentIndex] = useState(infiniteLoop ? show : 0);\n  const [length, setLength] = useState(children.length);\n  const [isRepeating, setIsRepeating] = useState(infiniteLoop && children.length > show);\n  const [transitionEnabled, setTransitionEnabled] = useState(true);\n  const [touchPosition, setTouchPosition] = useState(null); // Set the length to match current children from props\n\n  useEffect(() => {\n    setLength(children.length);\n    setIsRepeating(infiniteLoop && children.length > show);\n  }, [children, infiniteLoop, show]);\n  useEffect(() => {\n    if (isRepeating) {\n      if (currentIndex === show || currentIndex === length) {\n        setTransitionEnabled(true);\n      }\n    }\n  }, [currentIndex, isRepeating, show, length]);\n\n  const next = () => {\n    if (isRepeating || currentIndex < length - show) {\n      setCurrentIndex(prevState => prevState + 1);\n    }\n  };\n\n  const prev = () => {\n    if (isRepeating || currentIndex > 0) {\n      setCurrentIndex(prevState => prevState - 1);\n    }\n  };\n\n  const handleTouchStart = e => {\n    const touchDown = e.touches[0].clientX;\n    setTouchPosition(touchDown);\n  };\n\n  const handleTouchMove = e => {\n    const touchDown = touchPosition;\n\n    if (touchDown === null) {\n      return;\n    }\n\n    const currentTouch = e.touches[0].clientX;\n    const diff = touchDown - currentTouch;\n\n    if (diff > 5) {\n      next();\n    }\n\n    if (diff < -5) {\n      prev();\n    }\n\n    setTouchPosition(null);\n  };\n\n  const handleTransitionEnd = () => {\n    if (isRepeating) {\n      if (currentIndex === 0) {\n        setTransitionEnabled(false);\n        setCurrentIndex(length);\n      } else if (currentIndex === length + show) {\n        setTransitionEnabled(false);\n        setCurrentIndex(show);\n      }\n    }\n  };\n\n  const renderExtraPrev = () => {\n    let output = [];\n\n    for (let index = 0; index < show; index++) {\n      output.push(children[length - 1 - index]);\n    }\n\n    output.reverse();\n    return output;\n  };\n\n  const renderExtraNext = () => {\n    let output = [];\n\n    for (let index = 0; index < show; index++) {\n      output.push(children[index]);\n    }\n\n    return output;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carousel-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"carousel-wrapper\",\n      children: [(isRepeating || currentIndex > 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prev,\n        children: /*#__PURE__*/_jsxDEV(SvgIcon, {\n          className: \"left-arrow\",\n          children: /*#__PURE__*/_jsxDEV(ChevronLeft, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carousel-content-wrapper\",\n        onTouchStart: handleTouchStart,\n        onTouchMove: handleTouchMove,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `carousel-content show-${show}`,\n          style: {\n            transform: `translateX(-${currentIndex * (100 / show)}%)`,\n            transition: !transitionEnabled ? 'none' : undefined\n          },\n          onTransitionEnd: () => handleTransitionEnd(),\n          children: [length > show && isRepeating && renderExtraPrev(), children, length > show && isRepeating && renderExtraNext()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), (isRepeating || currentIndex < length - show) && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: next,\n        className: \"right-arrow\",\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Carousel, \"vj31rQkJig9mfGNYlWTpEWUcLkc=\");\n\n_c = Carousel;\nexport default Carousel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/components/Carousel/Carousel.js"],"names":["React","useEffect","useState","ChevronLeft","ChevronRight","SvgIcon","Carousel","props","children","show","infiniteLoop","currentIndex","setCurrentIndex","length","setLength","isRepeating","setIsRepeating","transitionEnabled","setTransitionEnabled","touchPosition","setTouchPosition","next","prevState","prev","handleTouchStart","e","touchDown","touches","clientX","handleTouchMove","currentTouch","diff","handleTransitionEnd","renderExtraPrev","output","index","push","reverse","renderExtraNext","transform","transition","undefined"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './carousel.css';\r\n    \r\nimport {\r\n    ChevronLeft,\r\n    ChevronRight\r\n} from '@material-ui/icons';\r\n\r\nimport { \r\n    SvgIcon\r\n } from '@material-ui/core';\r\n\r\nconst Carousel = (props) => {\r\n    const {children, show, infiniteLoop} = props\r\n\r\n    const [currentIndex, setCurrentIndex] = useState(infiniteLoop ? show : 0)\r\n    const [length, setLength] = useState(children.length)\r\n    \r\n    const [isRepeating, setIsRepeating] = useState(infiniteLoop && children.length > show)\r\n    const [transitionEnabled, setTransitionEnabled] = useState(true)\r\n\r\n    const [touchPosition, setTouchPosition] = useState(null)\r\n\r\n    // Set the length to match current children from props\r\n    useEffect(() => {\r\n        setLength(children.length)\r\n        setIsRepeating(infiniteLoop && children.length > show)\r\n    }, [children, infiniteLoop, show])\r\n\r\n    useEffect(() => {\r\n        if (isRepeating) {\r\n            if (currentIndex === show || currentIndex === length) {\r\n                setTransitionEnabled(true)\r\n            }\r\n        }\r\n    }, [currentIndex, isRepeating, show, length])\r\n\r\n    const next = () => {\r\n        if (isRepeating || currentIndex < (length - show)) {\r\n            setCurrentIndex(prevState => prevState + 1)\r\n        }\r\n    }\r\n\r\n    const prev = () => {\r\n        if (isRepeating || currentIndex > 0) {\r\n            setCurrentIndex(prevState => prevState - 1)\r\n        }\r\n    }\r\n\r\n    const handleTouchStart = (e) => {\r\n        const touchDown = e.touches[0].clientX\r\n        setTouchPosition(touchDown)\r\n    }\r\n\r\n    const handleTouchMove = (e) => {\r\n        const touchDown = touchPosition\r\n\r\n        if(touchDown === null) {\r\n            return\r\n        }\r\n\r\n        const currentTouch = e.touches[0].clientX\r\n        const diff = touchDown - currentTouch\r\n\r\n        if (diff > 5) {\r\n            next()\r\n        }\r\n\r\n        if (diff < -5) {\r\n            prev()\r\n        }\r\n\r\n        setTouchPosition(null)\r\n    }\r\n\r\n    const handleTransitionEnd = () => {\r\n        if (isRepeating) {\r\n            if (currentIndex === 0) {\r\n                setTransitionEnabled(false)\r\n                setCurrentIndex(length)\r\n            } else if (currentIndex === length + show) {\r\n                setTransitionEnabled(false)\r\n                setCurrentIndex(show)\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderExtraPrev = () => {\r\n        let output = []\r\n        for (let index = 0; index < show; index++) {\r\n            output.push(children[length - 1 - index])\r\n        }\r\n        output.reverse()\r\n        return output\r\n    }\r\n\r\n    const renderExtraNext = () => {\r\n        let output = []\r\n        for (let index = 0; index < show; index++) {\r\n            output.push(children[index])\r\n        }\r\n        return output\r\n    }\r\n\r\n    return (\r\n        <div className=\"carousel-container\">\r\n            <div className=\"carousel-wrapper\">\r\n                {/* You can alwas change the content of the button to other things */}\r\n                {\r\n                    (isRepeating || currentIndex > 0) &&\r\n                    <button onClick={prev}>\r\n                        <SvgIcon className=\"left-arrow\">\r\n                            <ChevronLeft/>\r\n                        </SvgIcon>\r\n                    </button>\r\n                }\r\n                <div\r\n                    className=\"carousel-content-wrapper\"\r\n                    onTouchStart={handleTouchStart}\r\n                    onTouchMove={handleTouchMove}\r\n                >\r\n                    <div\r\n                        className={`carousel-content show-${show}`}\r\n                        style={{\r\n                            transform: `translateX(-${currentIndex * (100 / show)}%)`,\r\n                            transition: !transitionEnabled ? 'none' : undefined,\r\n                        }}\r\n                        onTransitionEnd={() => handleTransitionEnd()}\r\n                    >\r\n                        {\r\n                            (length > show && isRepeating) &&\r\n                            renderExtraPrev()\r\n                        }\r\n                        {children}\r\n                        {\r\n                            (length > show && isRepeating) &&\r\n                            renderExtraNext()\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {/* You can alwas change the content of the button to other things */}\r\n                {\r\n                    (isRepeating || currentIndex < (length - show)) &&\r\n                    <button onClick={next} className=\"right-arrow\">\r\n                        &gt;\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Carousel\r\n"]},"metadata":{},"sourceType":"module"}