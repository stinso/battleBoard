{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mukki\\\\Documents\\\\workspace\\\\chaingames\\\\battleBoard\\\\client\\\\src\\\\views\\\\actionGameView\\\\Lobby.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\nimport { Box, Card, Container, Divider, Tab, Tabs, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography, makeStyles } from '@material-ui/core'; // new\n\nimport * as Sentry from \"@sentry/react\";\nimport { getEventsService } from '../../service/node.service';\nimport { getTimeFromEpoch, getDateFromEpoch, calculateTotalPrizePool, getDuration, getGameFormatFromIndex } from \"../../utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllBetAmount = 'All Bet Amount';\nconst AllDates = 'All Dates';\nconst font = \"'Saira', sans-serif\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    minWidth: '100%',\n    paddingBottom: theme.spacing(3)\n  },\n  image: {\n    width: '100vw'\n  },\n  free: {\n    color: theme.palette.secondary.main\n  },\n  priceCell: {\n    color: theme.palette.success.main\n  },\n  title: {\n    fontFamily: font,\n    fontSize: 40,\n    position: 'relative',\n    '&:before': {\n      position: 'absolute',\n      bottom: 8,\n      left: -16,\n      content: '\" \"',\n      height: 40,\n      width: 6,\n      backgroundColor: theme.palette.secondary.main,\n      marginRight: '20px'\n    }\n  }\n}));\n\nconst applyPagination = (list, page, limit) => {\n  return list.slice(page * limit, page * limit + limit);\n};\n\nconst LobbyView = () => {\n  _s();\n\n  const classes = useStyles();\n  const [currentTab, setCurrentTab] = useState('all');\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(10); // new\n\n  const [lobbyData, setLobbyData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [allBetAmounts, setAllBetAmounts] = useState([]);\n  const [betAmounts, setBetAmounts] = useState([]);\n  const [selectedBetAmount, setSelectedBetAmount] = useState([]);\n  const [allDates, setAllDates] = useState([]);\n  const [dates, setDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState([]);\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  const lobbyDataList = applyPagination(lobbyData, page, limit);\n  const location = useLocation();\n  const game = location.pathname.substring(location.pathname.lastIndexOf('/') + 1);\n  const tabs = [{\n    value: 'all',\n    label: 'All'\n  }, {\n    value: 'free',\n    label: 'Free'\n  }, {\n    value: 'paid',\n    label: 'Paid'\n  }];\n\n  const handleTabsChange = (event, value) => {\n    setCurrentTab(value);\n  };\n\n  async function getLobbyData() {\n    try {\n      var _data$events;\n\n      let gameID = 0; //TODO remove gameID hard coded below and send gameID of appropriate game like GameID for COD is 1\n\n      switch (game) {\n        case 'cod':\n          gameID = 1;\n          break;\n\n        case 'madden2021':\n          gameID = 2;\n          break;\n\n        case 'fifa':\n          gameID = 3;\n          break;\n\n        default:\n          gameID = 1;\n          break;\n      }\n\n      const {\n        data\n      } = await getEventsService({\n        gameID\n      });\n\n      if (data.success === true && ((_data$events = data.events) === null || _data$events === void 0 ? void 0 : _data$events.length) > 0) {\n        const editedData = data.events.map(row => {\n          return { ...row,\n            date: getDateFromEpoch(row.startTime),\n            time: getTimeFromEpoch(row.startTime),\n            noOfUsersEnrolled: row.noOfUsersEnrolled > row.maxUsers ? row.maxUsers : row.noOfUsersEnrolled,\n            duration: getDuration(row.startTime, row.endTime),\n            betAmount: row.sponsored ? 'Free' : `$${row.betAmount.toFixed(2)}`,\n            prizePool: `$${calculateTotalPrizePool(row.betAmount, row.maxUsers)}`\n          };\n        });\n        editedData.sort((firstRow, secondRow) => {\n          if (firstRow.date === secondRow.date && firstRow.time === secondRow.time) {\n            if (firstRow.betAmount === 'Free') {\n              return -1;\n            } else if (secondRow.betAmount === 'Free') {\n              return 1;\n            } else {\n              return parseInt(firstRow.betAmount.substring(1), 10) - parseInt(secondRow.betAmount.substring(1), 10);\n            }\n          }\n\n          return 0;\n        });\n        setLobbyData(editedData);\n        setSelectedBetAmount(AllBetAmount);\n        setSelectedDate(AllDates);\n        const allPossibleBetAmount = editedData.map(row => row.betAmount);\n        allPossibleBetAmount.sort(function (a, b) {\n          if (a === 'Free') {\n            return -1;\n          } else if (b === 'Free') {\n            return 1;\n          } else {\n            return parseInt(a.substring(1), 10) - parseInt(b.substring(1), 10);\n          }\n        });\n        setAllBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)]);\n        setBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)]);\n        const allPossibleDates = editedData.map(row => row.date);\n        setAllDates([AllDates, ...new Set(allPossibleDates)]);\n        setDates([AllDates, ...new Set(allPossibleDates)]);\n      }\n\n      setIsLoading(false);\n    } catch (error) {\n      console.log(\"ðŸš€ ~ file: GameLobby.jsx ~ line 111 ~ getLobbyData ~ error\", error);\n      Sentry.captureException(error, {\n        tags: {\n          page: location.pathname\n        }\n      });\n    }\n  }\n\n  const onBetAmountDropdownClick = row => {\n    setSelectedBetAmount(row.label);\n\n    if (row.label === AllBetAmount) {\n      setBetAmounts([...allBetAmounts]);\n    } else {\n      setBetAmounts([row.label]);\n    }\n  };\n\n  const onDateDropdownClick = row => {\n    setSelectedDate(row.label);\n\n    if (row.label === AllDates) {\n      setDates([...allDates]);\n    } else {\n      setDates([row.label]);\n    }\n  };\n\n  useEffect(() => {\n    getLobbyData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        ml: 2,\n        mt: 5,\n        mb: 3,\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          display: \"inline\",\n          variant: \"h2\",\n          color: \"textPrimary\",\n          className: classes.title,\n          children: \"Upcoming Events\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: 1,\n        mb: 3,\n        children: [/*#__PURE__*/_jsxDEV(Tabs, {\n          onChange: handleTabsChange,\n          scrollButtons: \"auto\",\n          textColor: \"secondary\",\n          value: currentTab,\n          variant: \"scrollable\",\n          children: tabs.map(tab => /*#__PURE__*/_jsxDEV(Tab, {\n            label: tab.label,\n            value: tab.value\n          }, tab.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.card,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          minWidth: 300,\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Event Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Game Format\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Participants\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Start Time\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 265,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Entry\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Duration\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Prize Pool\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: lobbyDataList.map(entry => {\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  hover: true,\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    className: classes.rankCell,\n                    children: entry.game\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: getGameFormatFromIndex(entry.game, entry.gameFormat)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 289,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: `${entry.noOfUsersEnrolled} of ${entry.maxUsers}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 292,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: `${entry.date} ${entry.time}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 295,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: entry.betAmount == 'Free' ? classes.free : '',\n                    children: entry.betAmount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: `${entry.duration} min`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 301,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: classes.priceCell,\n                    align: \"right\",\n                    children: entry.prizePool\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 304,\n                    columnNumber: 25\n                  }, this)]\n                }, entry.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 282,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n            component: \"div\",\n            count: lobbyData.length,\n            labelRowsPerPage: 'Rows per page',\n            onChangePage: handlePageChange,\n            onChangeRowsPerPage: handleLimitChange,\n            page: page,\n            rowsPerPage: limit,\n            rowsPerPageOptions: [5, 10, 25]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LobbyView, \"iannSz3CC+Ke0etOzvu7VMwxRDE=\", false, function () {\n  return [useStyles, useLocation];\n});\n\n_c = LobbyView;\nexport default LobbyView;\n\nvar _c;\n\n$RefreshReg$(_c, \"LobbyView\");","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/views/actionGameView/Lobby.js"],"names":["React","useEffect","useState","Link","RouterLink","useLocation","Box","Card","Container","Divider","Tab","Tabs","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","makeStyles","Sentry","getEventsService","getTimeFromEpoch","getDateFromEpoch","calculateTotalPrizePool","getDuration","getGameFormatFromIndex","AllBetAmount","AllDates","font","useStyles","theme","root","backgroundColor","palette","background","dark","minHeight","minWidth","paddingBottom","spacing","image","width","free","color","secondary","main","priceCell","success","title","fontFamily","fontSize","position","bottom","left","content","height","marginRight","applyPagination","list","page","limit","slice","LobbyView","classes","currentTab","setCurrentTab","setPage","setLimit","lobbyData","setLobbyData","isLoading","setIsLoading","allBetAmounts","setAllBetAmounts","betAmounts","setBetAmounts","selectedBetAmount","setSelectedBetAmount","allDates","setAllDates","dates","setDates","selectedDate","setSelectedDate","handlePageChange","event","newPage","handleLimitChange","parseInt","target","value","lobbyDataList","location","game","pathname","substring","lastIndexOf","tabs","label","handleTabsChange","getLobbyData","gameID","data","events","length","editedData","map","row","date","startTime","time","noOfUsersEnrolled","maxUsers","duration","endTime","betAmount","sponsored","toFixed","prizePool","sort","firstRow","secondRow","allPossibleBetAmount","a","b","Set","allPossibleDates","error","console","log","captureException","tags","onBetAmountDropdownClick","onDateDropdownClick","tab","card","entry","rankCell","gameFormat","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { \r\n  Link as RouterLink,\r\n  useLocation\r\n} from 'react-router-dom';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Container,\r\n  Divider,\r\n  Tab,\r\n  Tabs,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TablePagination,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles\r\n} from '@material-ui/core';\r\n\r\n// new\r\nimport * as Sentry from \"@sentry/react\";\r\nimport { getEventsService } from '../../service/node.service';\r\nimport {\r\n  getTimeFromEpoch,\r\n  getDateFromEpoch,\r\n  calculateTotalPrizePool,\r\n  getDuration,\r\n  getGameFormatFromIndex\r\n} from \"../../utils/helpers\";\r\n\r\nconst AllBetAmount = 'All Bet Amount';\r\nconst AllDates = 'All Dates';\r\n\r\nconst font = \"'Saira', sans-serif\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.dark,\r\n    minHeight: '100%',\r\n    minWidth: '100%',\r\n    paddingBottom: theme.spacing(3),\r\n  },\r\n  image: {\r\n    width: '100vw'\r\n  },\r\n  free: {\r\n    color: theme.palette.secondary.main\r\n  },\r\n  priceCell: {\r\n    color: theme.palette.success.main\r\n  },\r\n  title: {\r\n    fontFamily: font,\r\n    fontSize: 40,\r\n    position: 'relative',\r\n    '&:before': {\r\n      position: 'absolute',\r\n      bottom: 8,\r\n      left: -16,\r\n      content: '\" \"',\r\n      height: 40,\r\n      width: 6,\r\n      backgroundColor: theme.palette.secondary.main,\r\n      marginRight: '20px'\r\n    }\r\n  }\r\n}));\r\n\r\nconst applyPagination = (list, page, limit) => {\r\n  return list.slice(page * limit, page * limit + limit);\r\n};\r\n\r\nconst LobbyView = () => {\r\n  const classes = useStyles();\r\n  const [currentTab, setCurrentTab] = useState('all');\r\n  const [page, setPage] = useState(0);\r\n  const [limit, setLimit] = useState(10);\r\n\r\n  // new\r\n  const [lobbyData, setLobbyData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [allBetAmounts, setAllBetAmounts] = useState([]);\r\n  const [betAmounts, setBetAmounts] = useState([]);\r\n  const [selectedBetAmount, setSelectedBetAmount] = useState([]);\r\n  const [allDates, setAllDates] = useState([]);\r\n  const [dates, setDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState([]);\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleLimitChange = (event) => {\r\n    setLimit(parseInt(event.target.value));\r\n  };\r\n\r\n  const lobbyDataList = applyPagination(lobbyData, page, limit);\r\n  \r\n\r\n  const location = useLocation();\r\n  const game = location.pathname.substring(location.pathname.lastIndexOf('/') + 1)\r\n\r\n  const tabs = [\r\n    { value: 'all', label: 'All' },\r\n    { value: 'free', label: 'Free' },\r\n    { value: 'paid', label: 'Paid' }\r\n  ];\r\n\r\n  const handleTabsChange = (event, value) => {\r\n    setCurrentTab(value);\r\n  };\r\n\r\n  async function getLobbyData(){\r\n    try{\r\n      let gameID = 0;\r\n      //TODO remove gameID hard coded below and send gameID of appropriate game like GameID for COD is 1\r\n      switch (game) {\r\n        case 'cod':\r\n          gameID = 1;\r\n          break;\r\n        case 'madden2021':\r\n          gameID = 2;\r\n          break;\r\n        case 'fifa':\r\n          gameID = 3;\r\n          break;\r\n        default:\r\n          gameID = 1;\r\n          break;\r\n      }\r\n\r\n      const { data } = await getEventsService({gameID})\r\n      if (data.success === true && data.events?.length > 0) {\r\n        const editedData = data.events.map((row) => {\r\n          return {\r\n            ...row,\r\n            date: getDateFromEpoch(row.startTime),\r\n            time: getTimeFromEpoch(row.startTime),\r\n            noOfUsersEnrolled: row.noOfUsersEnrolled > row.maxUsers ? row.maxUsers : row.noOfUsersEnrolled, \r\n            duration: getDuration(row.startTime, row.endTime),\r\n            betAmount: row.sponsored ? 'Free' : `$${(row.betAmount).toFixed(2)}`,\r\n            prizePool: `$${(calculateTotalPrizePool(row.betAmount,\r\n              row.maxUsers))}`,\r\n          };\r\n        })\r\n        editedData.sort((firstRow, secondRow) => {\r\n          if (firstRow.date === secondRow.date\r\n            && firstRow.time === secondRow.time) {\r\n              if (firstRow.betAmount === 'Free') {\r\n                return -1\r\n              }\r\n              else if (secondRow.betAmount === 'Free') {\r\n                return 1;\r\n              }\r\n              else {\r\n                return parseInt(firstRow.betAmount.substring(1), 10) - parseInt(secondRow.betAmount.substring(1), 10)\r\n              }\r\n            }\r\n          return 0;\r\n        })\r\n        setLobbyData(editedData)\r\n        setSelectedBetAmount(AllBetAmount)\r\n        setSelectedDate(AllDates)\r\n        const allPossibleBetAmount = editedData.map((row) => row.betAmount)\r\n        allPossibleBetAmount.sort(function (a, b) {\r\n          if (a === 'Free') {\r\n            return -1\r\n          }\r\n          else if (b === 'Free') {\r\n            return 1;\r\n          }\r\n          else {\r\n            return parseInt(a.substring(1), 10) - parseInt(b.substring(1), 10)\r\n          }\r\n        })\r\n        setAllBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)])\r\n        setBetAmounts([AllBetAmount, ...new Set(allPossibleBetAmount)]);\r\n        const allPossibleDates = editedData.map((row) => row.date)\r\n        setAllDates([AllDates, ...new Set(allPossibleDates)])\r\n        setDates([AllDates, ...new Set(allPossibleDates)]);\r\n      } \r\n      setIsLoading(false);\r\n    }\r\n    catch (error) {\r\n      console.log(\"ðŸš€ ~ file: GameLobby.jsx ~ line 111 ~ getLobbyData ~ error\", error)\r\n      Sentry.captureException(error, {\r\n        tags: {\r\n            page: location.pathname,\r\n        },\r\n      });\r\n    }\r\n  }\r\n  const onBetAmountDropdownClick = (row) => {\r\n    setSelectedBetAmount(row.label);\r\n    if (row.label === AllBetAmount) {\r\n      setBetAmounts([...allBetAmounts]);\r\n    } else {\r\n      setBetAmounts([row.label]);\r\n    }\r\n  };\r\n  const onDateDropdownClick = (row) => {\r\n    setSelectedDate(row.label);\r\n    if (row.label === AllDates) {\r\n      setDates([...allDates]);\r\n    } else {\r\n      setDates([row.label]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLobbyData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Container maxWidth=\"lg\">\r\n        <Box ml={2} mt={5} mb={3}>\r\n          <Typography\r\n            display=\"inline\"\r\n            variant=\"h2\"\r\n            color=\"textPrimary\"\r\n            className={classes.title}\r\n          >\r\n            Upcoming Events\r\n          </Typography>\r\n        </Box>\r\n        <Box mt={1} mb={3}>\r\n          <Tabs\r\n            onChange={handleTabsChange}\r\n            scrollButtons=\"auto\"\r\n            textColor=\"secondary\"\r\n            value={currentTab}\r\n            variant=\"scrollable\"\r\n          >\r\n            {tabs.map((tab) => (\r\n              <Tab\r\n                key={tab.value}\r\n                label={tab.label}\r\n                value={tab.value}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n          <Divider />\r\n        </Box>\r\n        <Card\r\n          className={classes.card}\r\n        >\r\n          \r\n            <Box minWidth={300} >\r\n              <Table>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>\r\n                      Event Name\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Game Format\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Participants\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Start Time\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Entry\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      Duration\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">\r\n                      Prize Pool\r\n                    </TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {lobbyDataList.map((entry) => {\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        key={entry.id}\r\n                      >\r\n                        <TableCell className={classes.rankCell}>\r\n                          {entry.game}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {getGameFormatFromIndex(entry.game ,entry.gameFormat)}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {`${entry.noOfUsersEnrolled} of ${entry.maxUsers}`} \r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {`${entry.date} ${entry.time}`}\r\n                        </TableCell>\r\n                        <TableCell className={entry.betAmount == 'Free' ? classes.free : ''}>\r\n                          {entry.betAmount}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {`${entry.duration} min`}\r\n                        </TableCell>\r\n                        <TableCell className={classes.priceCell} align=\"right\">\r\n                          {entry.prizePool}\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                </TableBody>\r\n              </Table>\r\n              <TablePagination\r\n                component=\"div\"\r\n                count={lobbyData.length}\r\n                labelRowsPerPage={'Rows per page'}\r\n                onChangePage={handlePageChange}\r\n                onChangeRowsPerPage={handleLimitChange}\r\n                page={page}\r\n                rowsPerPage={limit}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n              />\r\n            </Box>\r\n        </Card>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LobbyView;\r\n"]},"metadata":{},"sourceType":"module"}