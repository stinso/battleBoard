{"ast":null,"code":"import moment from \"moment\";\nimport momentTz from \"moment-timezone\";\nimport { ethers } from \"ethers\";\nimport Contract from \"../context/Contract/Contract.jsx\";\nimport { ChaingamesFeesCutPercentage, BasePathToImg, GameFormat, Devices, Styles } from '../config/constants';\nimport { convertChaintoUSDService, getBalanceFromCS } from '../service/node.service';\nconst DATE_FORMAT = 'Do MMM YYYY';\nconst TIME_FORMAT = 'HH:mm';\nexport function getDateFromEpoch(epoch) {\n  const date = moment.utc(moment.unix(epoch)).local().format(DATE_FORMAT);\n  return date;\n}\nexport function getTimeFromEpoch(epoch) {\n  const zoneName = momentTz.tz.guess();\n  const timezone = momentTz.tz(zoneName).zoneAbbr();\n  const time = moment.utc(moment.unix(epoch)).local().format(TIME_FORMAT) + \" \" + timezone;\n  return time;\n}\nexport const getTimeAndDateFromEpoch = epoch => {\n  const date = getDateFromEpoch(epoch);\n  const time = getTimeFromEpoch(epoch);\n  return date + \" \" + time;\n};\nexport const getDuration = (sTime, eTime) => {\n  const durationUnix = moment.unix(eTime).diff(moment.unix(sTime));\n  const duration = moment.duration(durationUnix).as('minutes');\n  return parseInt(duration, 10);\n};\nexport async function getBalance(account) {\n  const contract = new Contract();\n\n  if (account) {\n    try {\n      const [approvedBalance, networkBalance] = await Promise.all([contract.approveBetBalance(account), contract.chainNetworkBalance(account)]);\n      return {\n        approvedBalance,\n        networkBalance\n      };\n    } catch (error) {\n      console.log(\"getBalance -> error\", error);\n      return {\n        approvedBalance: 0,\n        networkBalance: 0\n      };\n    }\n  } else {\n    return {\n      approvedBalance: 0,\n      networkBalance: 0\n    };\n  }\n}\nexport function calculateTotalPrizePool(betAmount, playersEnrolled = 0) {\n  const prize = betAmount * playersEnrolled * (1 - ChaingamesFeesCutPercentage / 100);\n  return prize.toFixed(2);\n}\nexport function calIndividualPrize(percentage, totalPrize) {\n  const prizeAmount = (percentage / 100 * totalPrize).toFixed(2);\n  return prizeAmount;\n}\nexport const generateImageURL = relativePathToImage => {\n  return BasePathToImg + relativePathToImage;\n};\nexport const getUSDValueOfAChain = async () => {\n  try {\n    const {\n      data\n    } = await convertChaintoUSDService();\n    const usdValueOfAChain = data['chain-games'].usd;\n    return usdValueOfAChain;\n  } catch (error) {\n    console.log(\"getUSDValueOfAChain->error\", error);\n  }\n};\nexport const checkIsPrivatePath = path => {\n  if (['/dashboard', '/upcomingEvents', '/profile/[username]', '/admin', '/gameInformationPage/[id]', '/actionGamePage/[game]', '/404', '/500', '/reportIssue', '/userAccountSetting', '/liveStats/[id]', '/myChallenges', '/dispute/[id]'].includes(path)) {\n    return true;\n  }\n\n  return false;\n};\nexport const checkIsPublicPath = path => {\n  if (['/login', '/register', '/ForgotPassword', '/VerifyEmail', '/resetPassword', '/'].includes(path)) {\n    return true;\n  }\n\n  return false;\n};\nexport function shortenAddress(address, firstChars = 3, lastChars = 7) {\n  return `${address.substring(0, firstChars)}...${address.substring(address.length - lastChars)}`;\n}\nexport function formatEventStatus(status) {\n  switch (status) {\n    case 'Waiting':\n      return status;\n\n    case 'Started':\n      return status;\n\n    case 'Ended':\n      return status;\n\n    case 'Cancelled':\n      return status;\n\n    case 'Deleted':\n      return status;\n\n    case 'PlacingBets':\n      return 'Placing Bets';\n\n    case 'WinnersDeclared':\n      return 'Winners Declared';\n\n    case 'PlaceBetsFailed':\n      return 'Place Bets Failed';\n\n    case 'DeclareWinnersFailed':\n      return 'Declare Winners Failed';\n\n    case 'DisputeOccured':\n      return 'Dispute Occured';\n  }\n}\nexport function getGameFormatFromIndex(game, gameFormatIndex) {\n  if (gameFormatIndex == 3) {\n    return \"Warzone - Max K/D\";\n  }\n\n  const gameFormat = GameFormat[game].find(row => {\n    if (row.index === gameFormatIndex) {\n      return row;\n    }\n  });\n  return gameFormat.name;\n}\nexport function getFormattedUserName(username, maxCharacters) {\n  if (username.length <= maxCharacters) {\n    return username;\n  }\n\n  return `${username.substring(0, maxCharacters - 2)}..`;\n}\nexport async function checkBalance(betAmount, account) {\n  if (account) {\n    const [{\n      approvedBalance,\n      networkBalance\n    }, usdValueOfOneChain] = await Promise.all([getBalance(account), getUSDValueOfAChain()]);\n    const approvedBalanceCheck = betAmount * 1.05 <= usdValueOfOneChain * approvedBalance;\n    const networkBalanceCheck = betAmount * 1.05 <= usdValueOfOneChain * networkBalance;\n    return approvedBalanceCheck && networkBalanceCheck;\n  } else {\n    return false;\n  }\n}\nexport async function isBalanceEnough(betAmount, isFiat) {\n  const {\n    data\n  } = await getBalanceFromCS({});\n\n  if (isFiat) {\n    return betAmount <= data.fiat;\n  } else {\n    const approvedBalanceCheck = betAmount * 1.05 <= data.token.allowanceInUSD;\n    const networkBalanceCheck = betAmount * 1.05 <= data.token.totalInUSD;\n    return approvedBalanceCheck && networkBalanceCheck;\n  }\n}\nexport function formatInCHAIN(amountInSmallestUnit) {\n  return parseInt(ethers.utils.formatEther(ethers.BigNumber.from(amountInSmallestUnit)), 10);\n}\nexport const checkGameRequiresManualResult = game => {\n  if (['Madden NFL 21', 'Fifa'].includes(game)) {\n    return true;\n  } else {\n    return false;\n  }\n};\nexport const isMinutesRemaining = (time, compareMinutes) => {\n  if (time > moment().add(compareMinutes, \"minutes\").unix()) {\n    return true;\n  }\n\n  return false;\n};\nexport const checkWithCurrentTime = (time, minutesToAdd) => {\n  if (moment.unix(time).add(minutesToAdd, \"minutes\").unix() > moment().unix()) {\n    return true;\n  }\n\n  return false;\n};\nexport const getDevicesArray = () => {\n  const devices = [];\n\n  for (let key of Object.keys(Devices)) {\n    devices.push(Devices[key]);\n  }\n\n  return devices;\n};\nexport const getDeviceName = deviceID => {\n  if (Devices.XBOX_SERIES.id === deviceID) {\n    return Devices.XBOX_SERIES.name;\n  } else if (Devices.XBOX_ONE.id === deviceID) {\n    return Devices.XBOX_ONE.name;\n  } else if (Devices.PS4.id === deviceID) {\n    return Devices.PS4.name;\n  } else if (Devices.PS5.id === deviceID) {\n    return Devices.PS5.name;\n  }\n};\nexport const getStyleName = styleIndex => {\n  const style = Styles.find(row => {\n    if (row.index === styleIndex) {\n      return row;\n    }\n  });\n  return style.name;\n};","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/utils/helpers.js"],"names":["moment","momentTz","ethers","Contract","ChaingamesFeesCutPercentage","BasePathToImg","GameFormat","Devices","Styles","convertChaintoUSDService","getBalanceFromCS","DATE_FORMAT","TIME_FORMAT","getDateFromEpoch","epoch","date","utc","unix","local","format","getTimeFromEpoch","zoneName","tz","guess","timezone","zoneAbbr","time","getTimeAndDateFromEpoch","getDuration","sTime","eTime","durationUnix","diff","duration","as","parseInt","getBalance","account","contract","approvedBalance","networkBalance","Promise","all","approveBetBalance","chainNetworkBalance","error","console","log","calculateTotalPrizePool","betAmount","playersEnrolled","prize","toFixed","calIndividualPrize","percentage","totalPrize","prizeAmount","generateImageURL","relativePathToImage","getUSDValueOfAChain","data","usdValueOfAChain","usd","checkIsPrivatePath","path","includes","checkIsPublicPath","shortenAddress","address","firstChars","lastChars","substring","length","formatEventStatus","status","getGameFormatFromIndex","game","gameFormatIndex","gameFormat","find","row","index","name","getFormattedUserName","username","maxCharacters","checkBalance","usdValueOfOneChain","approvedBalanceCheck","networkBalanceCheck","isBalanceEnough","isFiat","fiat","token","allowanceInUSD","totalInUSD","formatInCHAIN","amountInSmallestUnit","utils","formatEther","BigNumber","from","checkGameRequiresManualResult","isMinutesRemaining","compareMinutes","add","checkWithCurrentTime","minutesToAdd","getDevicesArray","devices","key","Object","keys","push","getDeviceName","deviceID","XBOX_SERIES","id","XBOX_ONE","PS4","PS5","getStyleName","styleIndex","style"],"mappings":"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","sourcesContent":["import moment from \"moment\";\r\nimport momentTz from \"moment-timezone\";\r\nimport {ethers} from \"ethers\";\r\nimport Contract from \"../context/Contract/Contract.jsx\";\r\nimport { ChaingamesFeesCutPercentage, BasePathToImg, GameFormat, Devices, Styles } from '../config/constants'\r\nimport { convertChaintoUSDService, getBalanceFromCS } from '../service/node.service'\r\nconst DATE_FORMAT = 'Do MMM YYYY';\r\nconst TIME_FORMAT = 'HH:mm';\r\n\r\nexport function getDateFromEpoch(epoch) {\r\n  const date = moment.utc(moment.unix(epoch)).local().format(DATE_FORMAT);\r\n  return date;\r\n}\r\n\r\nexport function getTimeFromEpoch(epoch) {\r\n  const zoneName = momentTz.tz.guess();\r\n  const timezone = momentTz.tz(zoneName).zoneAbbr();\r\n  const time =\r\n    moment.utc(moment.unix(epoch)).local().format(TIME_FORMAT) + \" \" + timezone;\r\n  return time;\r\n}\r\n\r\nexport const getTimeAndDateFromEpoch = (epoch) => {\r\n  const date = getDateFromEpoch(epoch);\r\n  const time = getTimeFromEpoch(epoch);\r\n  return date + \" \" + time;\r\n};\r\n\r\nexport const getDuration = (sTime, eTime) => {\r\n  const durationUnix = moment.unix(eTime).diff(moment.unix(sTime))\r\n  const duration = moment.duration(durationUnix).as('minutes');\r\n  return parseInt(duration, 10);\r\n};\r\n\r\nexport async function getBalance(account) {\r\n  const contract = new Contract();\r\n  if (account) {\r\n    try {\r\n      const [approvedBalance, networkBalance] = await Promise.all([\r\n        contract.approveBetBalance(account),\r\n        contract.chainNetworkBalance(account),\r\n      ]);\r\n      return { approvedBalance, networkBalance };\r\n    } catch (error) {\r\n      console.log(\"getBalance -> error\", error);\r\n      return { approvedBalance: 0, networkBalance: 0 };\r\n    }\r\n  } else {\r\n    return { approvedBalance: 0, networkBalance: 0 };\r\n  }\r\n}\r\n\r\nexport function calculateTotalPrizePool(betAmount, playersEnrolled = 0){\r\n    const prize = (betAmount * playersEnrolled)*(1 - (ChaingamesFeesCutPercentage/100))\r\n    return prize.toFixed(2);\r\n}\r\n\r\nexport function calIndividualPrize(percentage, totalPrize){\r\n  const prizeAmount = ((percentage / 100) * totalPrize).toFixed(2)\r\n  return prizeAmount;\r\n}\r\n\r\nexport const generateImageURL = (relativePathToImage) => {\r\n  return BasePathToImg + relativePathToImage;\r\n}\r\n\r\nexport const getUSDValueOfAChain = async () => {\r\n  try{\r\n    const {data} = await convertChaintoUSDService()\r\n    const usdValueOfAChain = data['chain-games'].usd;\r\n    return usdValueOfAChain;\r\n  }\r\n  catch(error){\r\n  console.log(\"getUSDValueOfAChain->error\", error)\r\n  }\r\n}\r\n\r\nexport const checkIsPrivatePath = (path) => {\r\n  if(\r\n    [\r\n      '/dashboard',\r\n      '/upcomingEvents',\r\n      '/profile/[username]',\r\n      '/admin',\r\n      '/gameInformationPage/[id]',\r\n      '/actionGamePage/[game]',\r\n      '/404',\r\n      '/500',\r\n      '/reportIssue',\r\n      '/userAccountSetting',\r\n      '/liveStats/[id]',\r\n      '/myChallenges',\r\n      '/dispute/[id]'\r\n    ]\r\n    .includes(path)\r\n  ){\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const checkIsPublicPath = (path) => {\r\n  if ([\r\n    '/login',\r\n    '/register',\r\n    '/ForgotPassword',\r\n    '/VerifyEmail',\r\n    '/resetPassword',\r\n    '/'\r\n    ]\r\n    .includes(path)\r\n  ){\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function shortenAddress(address, firstChars = 3, lastChars = 7) {\r\n  return `${address.substring(0, firstChars)}...${address.substring(address.length - lastChars)}`\r\n}\r\n\r\nexport function formatEventStatus(status) {\r\n  switch (status) {\r\n    case 'Waiting':\r\n      return status;\r\n    case 'Started':\r\n      return status;\r\n    case 'Ended':\r\n      return status;\r\n    case 'Cancelled':\r\n      return status;\r\n    case 'Deleted':\r\n      return status;\r\n    case 'PlacingBets':\r\n      return 'Placing Bets';\r\n    case 'WinnersDeclared':\r\n      return 'Winners Declared';\r\n    case 'PlaceBetsFailed':\r\n      return 'Place Bets Failed';\r\n    case 'DeclareWinnersFailed':\r\n      return 'Declare Winners Failed';\r\n    case 'DisputeOccured':\r\n      return 'Dispute Occured';\r\n  }\r\n}\r\n\r\nexport function getGameFormatFromIndex(game, gameFormatIndex) {\r\n  if (gameFormatIndex == 3) {\r\n    return \"Warzone - Max K/D\";\r\n  }\r\n  const gameFormat = GameFormat[game].find((row)=> \r\n    {\r\n      if(row.index === gameFormatIndex){\r\n        return row\r\n    }\r\n  })\r\n  return gameFormat.name;\r\n}\r\n\r\nexport function getFormattedUserName(username, maxCharacters) {\r\n  if (username.length <= maxCharacters) {\r\n    return username\r\n  }\r\n  return `${username.substring(0, maxCharacters-2)}..`;\r\n}\r\n\r\n\r\nexport async function checkBalance(betAmount, account) {\r\n  if (account) {\r\n    const [{ approvedBalance, networkBalance }, usdValueOfOneChain] = await Promise.all([\r\n      getBalance(account),\r\n      getUSDValueOfAChain(),\r\n    ]) \r\n    const approvedBalanceCheck =\r\n      betAmount * 1.05 <= usdValueOfOneChain * approvedBalance;\r\n    const networkBalanceCheck =\r\n      betAmount * 1.05 <= usdValueOfOneChain * networkBalance;\r\n    return (approvedBalanceCheck && networkBalanceCheck);\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function isBalanceEnough(betAmount, isFiat) {\r\n  const { data } = await getBalanceFromCS({});\r\n  if (isFiat) {\r\n    return betAmount <= data.fiat;\r\n  }\r\n  else {\r\n    const approvedBalanceCheck =\r\n    betAmount * 1.05 <= data.token.allowanceInUSD;\r\n    const networkBalanceCheck =\r\n    betAmount * 1.05 <= data.token.totalInUSD;\r\n    return (approvedBalanceCheck && networkBalanceCheck);\r\n  }\r\n}\r\n\r\nexport function formatInCHAIN (amountInSmallestUnit) {\r\n  return (parseInt((ethers.utils.formatEther(ethers.BigNumber.from((amountInSmallestUnit)))), 10))\r\n}\r\n\r\n\r\nexport const checkGameRequiresManualResult = (game) => {\r\n  if ([\r\n    'Madden NFL 21',\r\n    'Fifa'\r\n  ].includes(game)) {\r\n    return true;\r\n  }\r\n  else {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport const isMinutesRemaining = (time, compareMinutes) => {\r\n  if (time > moment().add(compareMinutes, \"minutes\").unix()) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const checkWithCurrentTime = (time, minutesToAdd) => {\r\n  \r\n  if (moment.unix(time).add(minutesToAdd, \"minutes\").unix() > moment().unix()) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport const getDevicesArray = () => {\r\n  const devices = [];\r\n  for (let key of Object.keys(Devices)) {\r\n    devices.push(Devices[key]);\r\n  }\r\n  return devices;\r\n}\r\n\r\nexport const getDeviceName = (deviceID) => {\r\n  if (Devices.XBOX_SERIES.id === deviceID) {\r\n    return Devices.XBOX_SERIES.name;\r\n  }\r\n  else if (Devices.XBOX_ONE.id === deviceID) {\r\n    return Devices.XBOX_ONE.name;\r\n  }\r\n  else if (Devices.PS4.id === deviceID) {\r\n    return Devices.PS4.name;\r\n  }\r\n  else if (Devices.PS5.id === deviceID) {\r\n    return Devices.PS5.name;\r\n  }\r\n}\r\n\r\nexport const getStyleName = (styleIndex) => {\r\n  const style =  Styles.find((row) => {\r\n    if (row.index === styleIndex) {\r\n      return row;\r\n    }\r\n  })\r\n  return style.name;\r\n}"]},"metadata":{},"sourceType":"module"}