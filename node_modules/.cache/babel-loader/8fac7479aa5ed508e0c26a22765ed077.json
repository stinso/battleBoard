{"ast":null,"code":"import { ethers } from \"ethers\";\nimport contractData from \"../contract-builds/StakingContract\";\nimport tokenData from \"../contract-builds/IERC20\";\nimport chainTokenMaticData from \"../contract-builds/ChainTokenMatic\";\nimport { MaticRpcURL, ChainTokenMaticAddress, RewardAccount, StakingContractAddress, ChainTokenAddress } from \"../../config/constants\";\nconst NETWORK_ROPSTEN = \"ropsten\";\nconst NETWORK_KOVAN = \"kovan\";\nconst NETWORK_GOERLI = \"goerli\";\nconst NETWORK_MAINNET = \"mainnet\";\nexport default class StakingContract {\n  constructor() {\n    this.initializeProvider();\n    this.intitalizeContractInstance();\n  }\n\n  initializeProvider() {\n    let canInitialize = false;\n    canInitialize = this.setLocalProvider();\n\n    if (!canInitialize) {\n      this.setDummyProvider();\n    }\n  }\n\n  intitalizeContractInstance() {\n    try {\n      this.stakingContract = new ethers.Contract(StakingContractAddress, contractData.abi, this.provider);\n    } catch (e) {\n      console.warn(\"could not initialize stakingContract: \", StakingContractAddress);\n      throw e;\n    }\n\n    try {\n      this.tokenContract = new ethers.Contract(ChainTokenAddress, tokenData.abi, this.provider);\n    } catch (e) {\n      console.warn(\"could not initialize stakingContract: \", ChainTokenAddress);\n      throw e;\n    }\n  }\n\n  static hasMetamask() {\n    return typeof window.web3 !== 'undefined';\n  }\n\n  async metamaskEnabled() {\n    try {\n      await this.provider.getSigner().getAddress();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static enableMetamask() {\n    return window.ethereum.enable();\n  }\n\n  ethBalance() {\n    this.setDefaultSigners();\n    return this.provider.getSigner().getBalance();\n  }\n\n  chainBalance(address) {\n    return this.tokenContract.balanceOf(address).then(bigNumVal => {\n      return ethers.utils.formatEther(bigNumVal);\n    });\n  }\n\n  getAllowance(address) {\n    this.setDefaultSigners();\n    return this.tokenContract.allowance(address, StakingContractAddress).then(bigNumVal => {\n      return ethers.utils.formatEther(bigNumVal);\n    });\n  }\n\n  getStakeDeposit(address) {\n    return this.stakingContract.getStakeDetails(address).then(res => res).catch(e => {\n      return false;\n    });\n  }\n\n  chainNetworkBalance(account) {\n    let provider = new ethers.providers.JsonRpcProvider(MaticRpcURL);\n    let chainTokenMaticContract = new ethers.Contract(ChainTokenMaticAddress, chainTokenMaticData, provider);\n    return chainTokenMaticContract.balanceOf(account).then(bigNumVal => {\n      return bigNumVal;\n    });\n  }\n\n  alreadyStaked() {\n    this.setDefaultSigners();\n    return this.provider.getSigner().getAddress().then(address => {\n      return this.stakingContract.getStakeDetails(address).then(res => {\n        return true;\n      }).catch(e => {\n        console.log(\"err: \", e);\n        return false;\n      });\n    });\n  }\n\n  contractTotalStakeLimit() {\n    return this.stakingContract.maxStakingAmount().then(bigNumVal => {\n      return bigNumVal.toString();\n    });\n  }\n\n  currentTotalStake() {\n    return this.stakingContract.currentTotalStake().then(bigNumVal => {\n      return bigNumVal.toString();\n    });\n  }\n\n  totalRewardsDistributed() {\n    return this.stakingContract.totalRewardsDistributed().then(bigNumVal => {\n      return parseInt(ethers.utils.formatEther(bigNumVal.toString()), 10);\n    });\n  }\n\n  async getRewardsAccumulated() {\n    const rewardsAddress = await this.stakingContract.rewardsAddress();\n    let [rewardsWithdrawn, rewardsDistributed, rewardsBalance, maticChainBalance] = await Promise.all([this.stakingContract.rewardsWithdrawn(), this.stakingContract.rewardsDistributed(), this.tokenContract.balanceOf(rewardsAddress), await this.chainNetworkBalance(RewardAccount)]);\n    const result = rewardsBalance.add(rewardsWithdrawn).sub(rewardsDistributed).add(maticChainBalance);\n    return Math.max(parseInt(ethers.utils.formatEther(result.toString()), 10), 0);\n  }\n\n  async getLatestBlock() {\n    const topicTransfer = ethers.utils.id(\"RewardsDistributed(uint256)\"); //This is the interface for your event\n\n    const logs = await this.provider.getLogs({\n      fromBlock: 10858675,\n      address: StakingContractAddress,\n      // Address of contract\n      toBlock: \"latest\",\n      topics: [topicTransfer]\n    });\n\n    if (logs && logs.length) {\n      const last = this.stakingContract.interface.parseLog(logs[logs.length - 1]);\n      const lastBlock = await this.provider.getBlock(logs[logs.length - 1].blockNumber);\n      return lastBlock.timestamp;\n    }\n\n    return null;\n  }\n\n  approveContract(value) {\n    this.setDefaultSigners();\n    return this.tokenContract.approve(StakingContractAddress, ethers.utils.parseEther(value));\n  }\n\n  stakeCHAIN(value) {\n    this.setDefaultSigners();\n    return this.stakingContract.deposit(ethers.utils.parseEther(value)).catch(e => console.error(\"stake err\", e));\n  }\n\n  setLocalProvider() {\n    if (!window.web3) {\n      console.warn(\"metamask not installed\");\n      return false;\n    }\n\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\n    this.provider.ready.catch(e => console.error(\"Could not create Web3Provider: \", e));\n    return true;\n  }\n\n  setDummyProvider() {\n    switch (process.env.REACT_APP_ETH_PROVIDER) {\n      case NETWORK_ROPSTEN:\n        this.provider = new ethers.providers.InfuraProvider(\"ropsten\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      case NETWORK_MAINNET:\n        this.provider = new ethers.providers.InfuraProvider(\"homestead\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      case NETWORK_KOVAN:\n        this.provider = new ethers.providers.InfuraProvider(\"kovan\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      case NETWORK_GOERLI:\n        this.provider = new ethers.providers.InfuraProvider(\"goerli\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      default:\n        this.provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:7545\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only JsonRpcProvider for development mode: \", e));\n    }\n  }\n\n  initiateWithdrawal() {\n    this.setDefaultSigners();\n    return this.stakingContract.initiateWithdrawal();\n  }\n\n  executeWithdrawal() {\n    this.setDefaultSigners();\n    return this.stakingContract.executeWithdrawal();\n  }\n\n  withdrawRewards() {\n    this.setDefaultSigners();\n    console.log(\"in withdrawRewards function\");\n\n    try {\n      return this.stakingContract.withdrawRewards();\n    } catch (error) {\n      console.log(\"error iin withdrawRewards->\", error);\n    }\n  } // Owner functions\n\n\n  toggleRewards(enabled) {\n    this.setDefaultSigners();\n    return this.stakingContract.toggleRewards(enabled);\n  }\n\n  togglePaused(enabled) {\n    this.setDefaultSigners();\n\n    if (enabled) {\n      return this.stakingContract.unpause();\n    }\n\n    return this.stakingContract.pause();\n  }\n\n  setDefaultSigners() {\n    this.stakingContract = this.stakingContract.connect(this.provider.getSigner());\n    this.tokenContract = this.tokenContract.connect(this.provider.getSigner());\n  }\n\n  setWeb3ReactProvider(library) {\n    if (!library) return;\n    this.provider = library;\n  }\n\n  static getEnv(envVar) {\n    const provider = process.env.REACT_APP_ETH_PROVIDER;\n    return process.env[envVar + `_${provider.toUpperCase()}`];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/context/StakingContract/StakingContract.jsx"],"names":["ethers","contractData","tokenData","chainTokenMaticData","MaticRpcURL","ChainTokenMaticAddress","RewardAccount","StakingContractAddress","ChainTokenAddress","NETWORK_ROPSTEN","NETWORK_KOVAN","NETWORK_GOERLI","NETWORK_MAINNET","StakingContract","constructor","initializeProvider","intitalizeContractInstance","canInitialize","setLocalProvider","setDummyProvider","stakingContract","Contract","abi","provider","e","console","warn","tokenContract","hasMetamask","window","web3","metamaskEnabled","getSigner","getAddress","enableMetamask","ethereum","enable","ethBalance","setDefaultSigners","getBalance","chainBalance","address","balanceOf","then","bigNumVal","utils","formatEther","getAllowance","allowance","getStakeDeposit","getStakeDetails","res","catch","chainNetworkBalance","account","providers","JsonRpcProvider","chainTokenMaticContract","alreadyStaked","log","contractTotalStakeLimit","maxStakingAmount","toString","currentTotalStake","totalRewardsDistributed","parseInt","getRewardsAccumulated","rewardsAddress","rewardsWithdrawn","rewardsDistributed","rewardsBalance","maticChainBalance","Promise","all","result","add","sub","Math","max","getLatestBlock","topicTransfer","id","logs","getLogs","fromBlock","toBlock","topics","length","last","interface","parseLog","lastBlock","getBlock","blockNumber","timestamp","approveContract","value","approve","parseEther","stakeCHAIN","deposit","error","Web3Provider","currentProvider","ready","process","env","REACT_APP_ETH_PROVIDER","InfuraProvider","initiateWithdrawal","executeWithdrawal","withdrawRewards","toggleRewards","enabled","togglePaused","unpause","pause","connect","setWeb3ReactProvider","library","getEnv","envVar","toUpperCase"],"mappings":"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","sourcesContent":["import {ethers} from \"ethers\";\r\nimport contractData from \"../contract-builds/StakingContract\";\r\nimport tokenData from \"../contract-builds/IERC20\";\r\nimport chainTokenMaticData from \"../contract-builds/ChainTokenMatic\";\r\nimport { MaticRpcURL, ChainTokenMaticAddress, RewardAccount, StakingContractAddress, ChainTokenAddress } from \"../../config/constants\";\r\n\r\nconst NETWORK_ROPSTEN = \"ropsten\";\r\nconst NETWORK_KOVAN = \"kovan\";\r\nconst NETWORK_GOERLI = \"goerli\";\r\nconst NETWORK_MAINNET = \"mainnet\";\r\n\r\nexport default class StakingContract {\r\n  provider;\r\n  stakingContract;\r\n  tokenContract;\r\n\r\n  constructor() {\r\n    this.initializeProvider()\r\n    this.intitalizeContractInstance()\r\n  }\r\n\r\n  initializeProvider() {\r\n    let canInitialize = false;\r\n    canInitialize = this.setLocalProvider();\r\n    \r\n    if ( !canInitialize ) {\r\n      this.setDummyProvider();\r\n    }\r\n  }\r\n\r\n  intitalizeContractInstance() {\r\n    try {\r\n      this.stakingContract = new ethers.Contract(StakingContractAddress, contractData.abi, this.provider);\r\n    } catch (e) {\r\n      console.warn(\"could not initialize stakingContract: \", StakingContractAddress);\r\n      throw e;\r\n    }\r\n\r\n    try {\r\n      this.tokenContract = new ethers.Contract(ChainTokenAddress, tokenData.abi, this.provider);\r\n    } catch (e) {\r\n      console.warn(\"could not initialize stakingContract: \", ChainTokenAddress);\r\n      throw e;\r\n    }    \r\n  }\r\n\r\n  static hasMetamask() {\r\n    return typeof window.web3 !== 'undefined';\r\n  }\r\n\r\n  async metamaskEnabled() {\r\n    try {\r\n      await this.provider.getSigner().getAddress();\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static enableMetamask() {\r\n    return window.ethereum.enable();\r\n  }\r\n\r\n  ethBalance() {\r\n    this.setDefaultSigners();\r\n    return this.provider.getSigner().getBalance();\r\n  }\r\n\r\n  chainBalance(address) {\r\n    return this.tokenContract.balanceOf(address)\r\n          .then(bigNumVal => {\r\n            return (ethers.utils.formatEther(bigNumVal));\r\n          });\r\n  }\r\n\r\n  getAllowance(address) {\r\n    this.setDefaultSigners();\r\n    return this.tokenContract.allowance(address, StakingContractAddress)\r\n      .then(bigNumVal => {\r\n        return (ethers.utils.formatEther(bigNumVal));\r\n      });\r\n  }\r\n\r\n  getStakeDeposit(address) {\r\n    return this.stakingContract.getStakeDetails(address)\r\n      .then(res => res)\r\n      .catch(e => {\r\n        return false;\r\n      });\r\n  }\r\n\r\n  chainNetworkBalance(account) {\r\n    let provider = new ethers.providers.JsonRpcProvider(MaticRpcURL);\r\n    let chainTokenMaticContract = new ethers.Contract(ChainTokenMaticAddress, chainTokenMaticData, provider);\r\n    return chainTokenMaticContract.balanceOf(account)\r\n      .then(bigNumVal => {\r\n        return bigNumVal\r\n      });\r\n  }\r\n\r\n  alreadyStaked() {\r\n    this.setDefaultSigners();\r\n    return this.provider.getSigner().getAddress()\r\n    .then(address => {\r\n      return this.stakingContract.getStakeDetails(address)\r\n      .then(res => {\r\n        return true;\r\n      })\r\n      .catch(e => {\r\n        console.log(\"err: \", e);\r\n        return false;\r\n      });\r\n    });\r\n  }\r\n\r\n  contractTotalStakeLimit() {\r\n    return this.stakingContract.maxStakingAmount()\r\n      .then(bigNumVal => {\r\n        return  ((bigNumVal.toString()));\r\n      });\r\n  }\r\n\r\n  currentTotalStake() {\r\n    return this.stakingContract.currentTotalStake()\r\n      .then(bigNumVal => {\r\n        return  ((bigNumVal.toString()));\r\n      });\r\n  }\r\n\r\n  totalRewardsDistributed() {\r\n    return this.stakingContract.totalRewardsDistributed()\r\n      .then(bigNumVal => {\r\n        return parseInt(ethers.utils.formatEther(bigNumVal.toString()), 10);\r\n      });\r\n  }\r\n\r\n  async getRewardsAccumulated() {\r\n    const rewardsAddress = await this.stakingContract.rewardsAddress()\r\n    let [rewardsWithdrawn,\r\n         rewardsDistributed,\r\n         rewardsBalance,\r\n         maticChainBalance\r\n        ] = await Promise.all([this.stakingContract.rewardsWithdrawn(), \r\n                               this.stakingContract.rewardsDistributed(), \r\n                               this.tokenContract.balanceOf(rewardsAddress),\r\n                               await this.chainNetworkBalance(RewardAccount)\r\n                             ]) \r\n    const result = rewardsBalance.add(rewardsWithdrawn).sub(rewardsDistributed).add(maticChainBalance)\r\n    return Math.max(parseInt(ethers.utils.formatEther(result.toString()), 10), 0);\r\n  }\r\n\r\n  async getLatestBlock() {\r\n    const topicTransfer= ethers.utils.id(\"RewardsDistributed(uint256)\") //This is the interface for your event\r\n    const logs = await this.provider.getLogs({\r\n      fromBlock: 10858675,\r\n      address: StakingContractAddress, // Address of contract\r\n      toBlock: \"latest\",\r\n      topics: [topicTransfer]\r\n    })\r\n    if(logs && logs.length) {\r\n      const last = this.stakingContract.interface.parseLog(logs[logs.length-1])\r\n      const lastBlock = await this.provider.getBlock(logs[logs.length-1].blockNumber)\r\n      return lastBlock.timestamp;\r\n    }\r\n    return null\r\n  }\r\n\r\n  approveContract(value) {\r\n    this.setDefaultSigners();\r\n    return this.tokenContract.approve(StakingContractAddress, ethers.utils.parseEther(value));\r\n  }\r\n\r\n  stakeCHAIN(value) {\r\n    this.setDefaultSigners();\r\n    return this.stakingContract.deposit(ethers.utils.parseEther(value))\r\n      .catch(e => console.error(\"stake err\", e));\r\n  }\r\n\r\n  setLocalProvider() {\r\n    if ( !window.web3 ) {\r\n      console.warn(\"metamask not installed\");\r\n      return false;\r\n    }\r\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\r\n    this.provider.ready.catch(e => console.error(\"Could not create Web3Provider: \", e));\r\n    return true;\r\n  }\r\n\r\n  setDummyProvider() {\r\n    switch (process.env.REACT_APP_ETH_PROVIDER) {\r\n      case NETWORK_ROPSTEN:\r\n        this.provider = new ethers.providers.InfuraProvider(\"ropsten\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      case NETWORK_MAINNET:\r\n        this.provider = new ethers.providers.InfuraProvider(\"homestead\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      case NETWORK_KOVAN:\r\n        this.provider = new ethers.providers.InfuraProvider(\"kovan\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      case NETWORK_GOERLI:\r\n        this.provider = new ethers.providers.InfuraProvider(\"goerli\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      default:\r\n        this.provider  = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:7545\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only JsonRpcProvider for development mode: \", e));\r\n    }\r\n  }\r\n\r\n  initiateWithdrawal() {\r\n    this.setDefaultSigners();\r\n    return this.stakingContract.initiateWithdrawal();\r\n  }\r\n\r\n  executeWithdrawal() {\r\n    this.setDefaultSigners();\r\n    return this.stakingContract.executeWithdrawal();\r\n  }\r\n\r\n  withdrawRewards() {\r\n    this.setDefaultSigners();\r\n    console.log(\"in withdrawRewards function\")\r\n    try{\r\n      return this.stakingContract.withdrawRewards();\r\n    }\r\n    catch(error){\r\n      console.log(\"error iin withdrawRewards->\", error)\r\n    }\r\n  }\r\n\r\n  // Owner functions\r\n  toggleRewards(enabled) {\r\n    this.setDefaultSigners();\r\n    return this.stakingContract.toggleRewards(enabled)\r\n  }\r\n\r\n  togglePaused(enabled) {\r\n    this.setDefaultSigners();\r\n    if ( enabled ) {\r\n      return this.stakingContract.unpause();\r\n    }\r\n    return this.stakingContract.pause();\r\n  }\r\n\r\n  setDefaultSigners() {\r\n    this.stakingContract = this.stakingContract.connect(this.provider.getSigner());\r\n    this.tokenContract = this.tokenContract.connect(this.provider.getSigner());\r\n  }\r\n\r\n  setWeb3ReactProvider(library) {\r\n    if(!library) return;\r\n    this.provider = library\r\n  }\r\n\r\n  static getEnv(envVar) {\r\n    const provider = process.env.REACT_APP_ETH_PROVIDER;\r\n    \r\n    return process.env[envVar + `_${provider.toUpperCase()}`];\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}