{"ast":null,"code":"import { ethers } from \"ethers\";\nimport tokenData from \"../contract-builds/IERC20\";\nimport rootChainManagerData from \"../contract-builds/RootChainManager\";\nimport chainTokenMaticData from \"../contract-builds/ChainTokenMatic\";\nimport { network, chainTokenContractAddress, ERC20PredicateProxyAddress, RootChainManageProxyAddress, ChainTokenMaticAddress, MaticRpcURL, BetManagerMaticAddress, RootChainProxyAddress } from \"../../config/constants\";\nimport rootChainProxyData from \"../contract-builds/RootChainProxy\";\nconst NETWORK_ROPSTEN = \"ropsten\";\nconst NETWORK_KOVAN = \"kovan\";\nconst NETWORK_DEVELOPMENT = \"development\";\nconst NETWORK_GOERLI = \"goerli\";\nconst NETWORK_LIVE = \"mainnet\";\nexport default class Contract {\n  constructor() {\n    this.setDummyProvider();\n    this.initializeContractInstance();\n  }\n\n  initializeContractInstance() {\n    try {\n      this.tokenContract = new ethers.Contract(chainTokenContractAddress, tokenData.abi, this.provider);\n    } catch (e) {\n      console.warn(\"could not initialize chain token contract: \");\n      throw e;\n    }\n  }\n\n  static hasMetamask() {\n    return typeof window.web3 !== 'undefined';\n  }\n\n  async metamaskEnabled() {\n    try {\n      await this.provider.getSigner().getAddress();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static enableMetamask() {\n    return window.ethereum.enable();\n  }\n\n  ethBalance() {\n    this.setDefaultSigners();\n    return this.provider.getSigner().getBalance();\n  }\n\n  chainBalance(account) {\n    return this.tokenContract.balanceOf(account).then(bigNumVal => {\n      return parseInt(ethers.utils.formatEther(bigNumVal), 10);\n    });\n  }\n\n  chainNetworkBalance(account) {\n    let provider = new ethers.providers.JsonRpcProvider(MaticRpcURL);\n    let chainTokenMaticContract = new ethers.Contract(ChainTokenMaticAddress, chainTokenMaticData, provider);\n    return chainTokenMaticContract.balanceOf(account).then(bigNumVal => {\n      return parseInt(ethers.utils.formatEther(bigNumVal), 10);\n    });\n  }\n\n  approveBetBalance(account) {\n    let provider = new ethers.providers.JsonRpcProvider(MaticRpcURL);\n    let chainTokenMaticContract = new ethers.Contract(ChainTokenMaticAddress, chainTokenMaticData, provider);\n    return chainTokenMaticContract.allowance(account, BetManagerMaticAddress).then(bigNumVal => {\n      return parseInt(ethers.utils.formatEther(bigNumVal), 10);\n    });\n  }\n\n  getRootChainLatestChildBlock() {\n    let provider = new ethers.providers.InfuraProvider(network.name);\n    let chainTokenMaticContract = new ethers.Contract(RootChainProxyAddress, rootChainProxyData, provider);\n    return chainTokenMaticContract.getLastChildBlock().then(bigNumVal => {\n      return parseInt(bigNumVal, 10);\n    });\n  }\n\n  getAllowance() {\n    this.setDefaultSigners();\n    return this.provider.getSigner().getAddress().then(address => {\n      return this.tokenContract.allowance(address, Contract.getEnv(\"REACT_APP_ETH_DEPLOYED_CONTRACT\")).then(bigNumVal => {\n        return parseInt(ethers.utils.formatEther(bigNumVal), 10);\n      });\n    });\n  }\n\n  approveContract(value) {\n    this.setDefaultSigners();\n    return this.tokenContract.approve(Contract.getEnv(\"REACT_APP_ETH_DEPLOYED_CONTRACT\"), ethers.utils.parseEther(value));\n  }\n\n  approveForDeposit(value, library) {\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\n    this.tokenContract = new ethers.Contract(chainTokenContractAddress, tokenData.abi, this.provider);\n    this.setDefaultSigners();\n    return this.tokenContract.approve(ERC20PredicateProxyAddress, ethers.utils.parseEther(value.toString()));\n  }\n\n  depositChains(account, library, value) {\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\n    let rootChainManagerContract = new ethers.Contract(RootChainManageProxyAddress, rootChainManagerData, this.provider);\n    const BNValue = ethers.utils.parseEther(value.toString());\n    let bnString = BNValue.toHexString().slice(2);\n    let formattedValue = '0x' + bnString.padStart(64, '0');\n    rootChainManagerContract = rootChainManagerContract.connect(this.provider.getSigner());\n    return rootChainManagerContract.depositFor(account, chainTokenContractAddress, formattedValue);\n  }\n\n  setLocalProvider() {\n    if (!window.web3) {\n      console.warn(\"metamask not installed\");\n      return false;\n    }\n\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\n    this.provider.ready.catch(e => console.error(\"Could not create Web3Provider: \", e));\n    return true;\n  }\n\n  setDummyProvider() {\n    switch (process.env.REACT_APP_ETH_PROVIDER) {\n      case NETWORK_ROPSTEN:\n        this.provider = new ethers.providers.InfuraProvider(\"ropsten\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      case NETWORK_LIVE:\n        this.provider = new ethers.providers.InfuraProvider(\"homestead\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      case NETWORK_KOVAN:\n        this.provider = new ethers.providers.InfuraProvider(\"kovan\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      case NETWORK_GOERLI:\n        this.provider = new ethers.providers.InfuraProvider(\"goerli\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\n        break;\n\n      default:\n        this.provider = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:7545\");\n        this.provider.ready.catch(e => console.error(\"Could not create read-only JsonRpcProvider for development mode: \", e));\n    }\n  }\n\n  setDefaultSigners() {\n    this.tokenContract = this.tokenContract.connect(this.provider.getSigner());\n  }\n\n  setWeb3ReactProvider(library) {\n    if (!library) return;\n    this.provider = library;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mukki/Documents/workspace/chaingames/battleBoard/client/src/context/Contract/Contract.jsx"],"names":["ethers","tokenData","rootChainManagerData","chainTokenMaticData","network","chainTokenContractAddress","ERC20PredicateProxyAddress","RootChainManageProxyAddress","ChainTokenMaticAddress","MaticRpcURL","BetManagerMaticAddress","RootChainProxyAddress","rootChainProxyData","NETWORK_ROPSTEN","NETWORK_KOVAN","NETWORK_DEVELOPMENT","NETWORK_GOERLI","NETWORK_LIVE","Contract","constructor","setDummyProvider","initializeContractInstance","tokenContract","abi","provider","e","console","warn","hasMetamask","window","web3","metamaskEnabled","getSigner","getAddress","enableMetamask","ethereum","enable","ethBalance","setDefaultSigners","getBalance","chainBalance","account","balanceOf","then","bigNumVal","parseInt","utils","formatEther","chainNetworkBalance","providers","JsonRpcProvider","chainTokenMaticContract","approveBetBalance","allowance","getRootChainLatestChildBlock","InfuraProvider","name","getLastChildBlock","getAllowance","address","getEnv","approveContract","value","approve","parseEther","approveForDeposit","library","Web3Provider","currentProvider","toString","depositChains","rootChainManagerContract","BNValue","bnString","toHexString","slice","formattedValue","padStart","connect","depositFor","setLocalProvider","ready","catch","error","process","env","REACT_APP_ETH_PROVIDER","setWeb3ReactProvider"],"mappings":"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","sourcesContent":["import {ethers} from \"ethers\";\r\nimport tokenData from \"../contract-builds/IERC20\";\r\nimport rootChainManagerData from \"../contract-builds/RootChainManager\";\r\nimport chainTokenMaticData from \"../contract-builds/ChainTokenMatic\";\r\nimport { network, chainTokenContractAddress, ERC20PredicateProxyAddress, RootChainManageProxyAddress, ChainTokenMaticAddress, MaticRpcURL, BetManagerMaticAddress, RootChainProxyAddress} from \"../../config/constants\";\r\nimport rootChainProxyData from \"../contract-builds/RootChainProxy\";\r\n\r\n\r\nconst NETWORK_ROPSTEN = \"ropsten\";\r\nconst NETWORK_KOVAN = \"kovan\";\r\nconst NETWORK_DEVELOPMENT = \"development\";\r\nconst NETWORK_GOERLI = \"goerli\";\r\nconst NETWORK_LIVE = \"mainnet\";\r\n\r\nexport default class Contract {\r\n  provider;\r\n  stakingContract;\r\n  tokenContract;\r\n\r\n  constructor() {\r\n    this.setDummyProvider();\r\n    this.initializeContractInstance();\r\n  }\r\n\r\n  initializeContractInstance() {\r\n    try {\r\n      this.tokenContract = new ethers.Contract(chainTokenContractAddress, tokenData.abi, this.provider);\r\n    } catch (e) {\r\n      console.warn(\"could not initialize chain token contract: \");\r\n      throw e;\r\n    }    \r\n  }\r\n\r\n  static hasMetamask() {\r\n    return typeof window.web3 !== 'undefined';\r\n  }\r\n\r\n  async metamaskEnabled() {\r\n    try {\r\n      await this.provider.getSigner().getAddress();\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static enableMetamask() {\r\n    return window.ethereum.enable();\r\n  }\r\n\r\n  ethBalance() {\r\n    this.setDefaultSigners();\r\n    return this.provider.getSigner().getBalance();\r\n  }\r\n\r\n  chainBalance(account) {    \r\n    return this.tokenContract.balanceOf(account)\r\n      .then(bigNumVal => {\r\n        return parseInt(ethers.utils.formatEther(bigNumVal), 10);\r\n      });   \r\n  }\r\n\r\n  chainNetworkBalance(account) {\r\n    let provider  = new ethers.providers.JsonRpcProvider(MaticRpcURL);\r\n    let chainTokenMaticContract = new ethers.Contract(ChainTokenMaticAddress, chainTokenMaticData, provider);\r\n    return chainTokenMaticContract.balanceOf(account)\r\n      .then(bigNumVal => {\r\n        return parseInt(ethers.utils.formatEther(bigNumVal), 10);\r\n      });\r\n  }\r\n\r\n  approveBetBalance(account) {\r\n    let provider  = new ethers.providers.JsonRpcProvider(MaticRpcURL);\r\n    let chainTokenMaticContract = new ethers.Contract(ChainTokenMaticAddress, chainTokenMaticData, provider);\r\n    return chainTokenMaticContract.allowance(account, BetManagerMaticAddress)\r\n      .then(bigNumVal => {\r\n        return parseInt(ethers.utils.formatEther(bigNumVal), 10);\r\n      });\r\n  }\r\n\r\n  getRootChainLatestChildBlock () {\r\n    let provider  = new ethers.providers.InfuraProvider(network.name);\r\n    let chainTokenMaticContract = new ethers.Contract(RootChainProxyAddress, rootChainProxyData, provider);\r\n    return chainTokenMaticContract.getLastChildBlock()\r\n      .then(bigNumVal => {\r\n        return parseInt(bigNumVal, 10);\r\n      });\r\n  }\r\n\r\n  getAllowance() {\r\n    this.setDefaultSigners();\r\n    return this.provider.getSigner().getAddress()\r\n      .then(address => {\r\n        return this.tokenContract.allowance(address, Contract.getEnv(\"REACT_APP_ETH_DEPLOYED_CONTRACT\"))\r\n          .then(bigNumVal => {\r\n            return parseInt(ethers.utils.formatEther(bigNumVal), 10);\r\n          });\r\n      });\r\n  }\r\n\r\n  approveContract(value) {\r\n    this.setDefaultSigners();\r\n    return this.tokenContract.approve(Contract.getEnv(\"REACT_APP_ETH_DEPLOYED_CONTRACT\"), ethers.utils.parseEther(value));\r\n  }\r\n\r\n  approveForDeposit(value, library) {\r\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\r\n    this.tokenContract = new ethers.Contract(chainTokenContractAddress, tokenData.abi, this.provider);\r\n    this.setDefaultSigners()\r\n    return this.tokenContract.approve(ERC20PredicateProxyAddress, ethers.utils.parseEther(value.toString()))\r\n  }\r\n\r\n  depositChains(account, library, value) {\r\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\r\n    let rootChainManagerContract = new ethers.Contract(RootChainManageProxyAddress, rootChainManagerData, this.provider);\r\n    const BNValue = ethers.utils.parseEther(value.toString());\r\n    let bnString = BNValue.toHexString().slice(2)\r\n    let formattedValue = '0x' + bnString.padStart(64, '0');\r\n    rootChainManagerContract = rootChainManagerContract.connect(this.provider.getSigner());\r\n    return rootChainManagerContract.depositFor(account, chainTokenContractAddress, formattedValue)\r\n  }\r\n\r\n  setLocalProvider() {\r\n    if ( !window.web3 ) {\r\n      console.warn(\"metamask not installed\");\r\n      return false;\r\n    }\r\n    this.provider = new ethers.providers.Web3Provider(window.web3.currentProvider);\r\n    this.provider.ready.catch(e => console.error(\"Could not create Web3Provider: \", e));\r\n    return true;\r\n  }\r\n\r\n  setDummyProvider() {\r\n    switch (process.env.REACT_APP_ETH_PROVIDER) {\r\n      case NETWORK_ROPSTEN:\r\n        this.provider = new ethers.providers.InfuraProvider(\"ropsten\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      case NETWORK_LIVE:\r\n        this.provider = new ethers.providers.InfuraProvider(\"homestead\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      case NETWORK_KOVAN:\r\n        this.provider = new ethers.providers.InfuraProvider(\"kovan\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n        break;\r\n      case NETWORK_GOERLI:\r\n          this.provider = new ethers.providers.InfuraProvider(\"goerli\");\r\n          this.provider.ready.catch(e => console.error(\"Could not create read-only InfuraProvider: \", e));\r\n          break;\r\n      default:\r\n        this.provider  = new ethers.providers.JsonRpcProvider(\"http://127.0.0.1:7545\");\r\n        this.provider.ready.catch(e => console.error(\"Could not create read-only JsonRpcProvider for development mode: \", e));\r\n    }\r\n  }\r\n\r\n\r\n  setDefaultSigners() {\r\n    this.tokenContract = this.tokenContract.connect(this.provider.getSigner());\r\n  }\r\n\r\n  setWeb3ReactProvider(library) {\r\n    if(!library) return;\r\n    this.provider = library\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}